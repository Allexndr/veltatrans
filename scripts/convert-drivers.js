const fs = require('fs');
const path = require('path');

// –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
const fullDriversPath = path.join(__dirname, '../materials/–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π.json');
const outputPath = path.join(__dirname, '../data/velta-data/drivers-full.json');

try {
  console.log('üìÅ –ß–∏—Ç–∞—é –ø–æ–ª–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π...');
  const fullData = fs.readFileSync(fullDriversPath, 'utf8');
  
  // –ü–∞—Ä—Å–∏–º JSON
  const drivers = JSON.parse(fullData);
  console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${drivers.length} –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –ø–æ–ª–Ω–æ–π –±–∞–∑–µ`);
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±–æ—Ç–∞
  const convertedDrivers = drivers.map((driver, index) => {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    let phone = driver['–¢–µ–ª–µ—Ñ–æ–Ω –í–æ–¥–∏—Ç–µ–ª—è'] || '';
    if (typeof phone === 'number') {
      phone = phone.toString();
    }
    
    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º
    phone = phone.replace(/[^\d+]/g, '');
    if (phone.startsWith('8')) {
      phone = '+7' + phone.substring(1);
    } else if (phone.startsWith('7') && !phone.startsWith('+7')) {
      phone = '+7' + phone.substring(1);
    } else if (!phone.startsWith('+')) {
      phone = '+7' + phone;
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è
    let carType = 'tent'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const vehicleType = driver['–í–∏–¥ –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞'] || '';
    if (vehicleType.toLowerCase().includes('—Ä–µ—Ñ—Ä–∏–∂–µ—Ä–∞—Ç–æ—Ä') || vehicleType.toLowerCase().includes('—Ç–µ—Ä–º–æ—Å')) {
      carType = 'refrigerator';
    } else if (vehicleType.toLowerCase().includes('–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä') || vehicleType.toLowerCase().includes('–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞')) {
      carType = 'container';
    } else if (vehicleType.toLowerCase().includes('–∞–≤—Ç–æ–≤–æ–∑')) {
      carType = 'car_carrier';
    } else if (vehicleType.toLowerCase().includes('—Å–ø–µ—Ü—Ç–µ—Ö–Ω–∏–∫–∞')) {
      carType = 'special';
    }
    
    return {
      id: index + 1,
      name: driver['–í–æ–¥–∏—Ç–µ–ª—å'] || `–í–æ–¥–∏—Ç–µ–ª—å ${index + 1}`,
      phone: phone,
      carNumber: driver['–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] || '–ù–µ —É–∫–∞–∑–∞–Ω',
      carType: carType,
      experience: '5+ –ª–µ—Ç',
      rating: 4.5 + (Math.random() * 0.5), // –†–µ–π—Ç–∏–Ω–≥ 4.5-5.0
      status: 'active',
      location: '–ê–ª–º–∞—Ç—ã',
      createdAt: new Date().toISOString(),
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –±–∞–∑—ã
      originalData: {
        vehicleType: vehicleType,
        carrier: driver['–ü–µ—Ä–µ–≤–æ–∑—á–∏–∫ (–Æ–õ/–ß–õ)'] || '–ß–ê–°–¢–ù–û–ï –õ–ò–¶–û',
        fullVehicle: driver['–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] || ''
      }
    };
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  fs.writeFileSync(outputPath, JSON.stringify(convertedDrivers, null, 2));
  console.log(`‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${convertedDrivers.length} –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ ${outputPath}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  const phoneStats = {};
  convertedDrivers.forEach(driver => {
    const prefix = driver.phone.substring(0, 4);
    phoneStats[prefix] = (phoneStats[prefix] || 0) + 1;
  });
  
  console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –Ω–æ–º–µ—Ä–∞–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤:');
  Object.entries(phoneStats).forEach(([prefix, count]) => {
    console.log(`  ${prefix}...: ${count} –≤–æ–¥–∏—Ç–µ–ª–µ–π`);
  });
  
  console.log('\nüöó –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π:');
  const carTypeStats = {};
  convertedDrivers.forEach(driver => {
    carTypeStats[driver.carType] = (carTypeStats[driver.carType] || 0) + 1;
  });
  Object.entries(carTypeStats).forEach(([type, count]) => {
    console.log(`  ${type}: ${count} –≤–æ–¥–∏—Ç–µ–ª–µ–π`);
  });
  
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:', error.message);
  process.exit(1);
}
