#!/usr/bin/env node

const BASE_URL = 'http://localhost:3000';

async function testBot() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ Velta Trans...\n');
  
  // Test 1: Health check
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–æ—Ç–∞...');
  try {
    const response = await fetch(`${BASE_URL}/api/telegram/webhook`);
    const data = await response.json();
    console.log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${data.success ? 'OK' : 'ERROR'}`);
    console.log(`üìä MongoDB: ${data.mongodb}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // Test 2: Analytics
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏...');
  try {
    const response = await fetch(`${BASE_URL}/api/telegram/analytics`);
    const data = await response.json();
    if (data.success) {
      console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª–µ–π: ${data.analytics.overview.totalDrivers}`);
      console.log(`‚úÖ –ó–∞–∫–∞–∑–æ–≤: ${data.analytics.overview.totalOrders}`);
      console.log(`‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${data.analytics.overview.successRate}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏');
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // Test 3: Notifications
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
  try {
    const response = await fetch(`${BASE_URL}/api/telegram/notifications`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        type: 'system_alert',
        message: '–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã'
      })
    });
    const data = await response.json();
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${data.sent ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' : '–û—à–∏–±–∫–∞'}`);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // Test 4: Bot commands
  console.log('\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...');
  
  const commands = [
    { text: '/start', description: '–°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞' },
    { text: 'üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', description: '–ö–æ–º–∞–Ω–¥–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏' },
    { text: 'üöó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å', description: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è' }
  ];
  
  for (const command of commands) {
    try {
      const response = await fetch(`${BASE_URL}/api/telegram/webhook`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          message: {
            chat: { id: '123' },
            text: command.text,
            from: { id: 123 }
          }
        })
      });
      const data = await response.json();
      console.log(`‚úÖ ${command.description}: ${data.success ? 'OK' : 'ERROR'}`);
    } catch (error) {
      console.log(`‚ùå ${command.description}: ${error.message}`);
    }
  }
  
  console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

// Run tests
testBot().catch(console.error);
