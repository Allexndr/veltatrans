import { NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const WEBHOOK_URL = 'https://velta-logistics.com/api/telegram/webhook';

async function setupWebhookAutomatically() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    const webhookInfoResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo`);
    const webhookInfo = await webhookInfoResponse.json();
    
    // –ï—Å–ª–∏ webhook —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if (webhookInfo.result?.url === WEBHOOK_URL) {
      return {
        success: true,
        message: 'Webhook —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ',
        url: WEBHOOK_URL
      };
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    const setWebhookResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        allowed_updates: ['message', 'callback_query'],
        drop_pending_updates: true
      }),
    });

    const result = await setWebhookResponse.json();
    
    if (result.ok) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
      await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: '-1002999769930',
          text: `üöÄ <b>–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê</b>\n\n‚úÖ Webhook –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n‚úÖ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω\n\n‚è∞ ${new Date().toLocaleString('ru-RU')}\n\n<i>–í–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: /start</i>`,
          parse_mode: 'HTML'
        }),
      });

      return {
        success: true,
        message: 'Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        url: WEBHOOK_URL,
        telegram_response: result
      };
    } else {
      throw new Error(result.description || '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook');
    }
  } catch (error) {
    console.error('Auto-setup error:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
      url: WEBHOOK_URL
    };
  }
}

export async function GET() {
  const result = await setupWebhookAutomatically();
  
  return NextResponse.json({
    ...result,
    timestamp: new Date().toISOString(),
    bot_username: '@veltatrans_bot'
  });
}

export async function POST() {
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook
  try {
    const setWebhookResponse = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        url: WEBHOOK_URL,
        allowed_updates: ['message', 'callback_query'],
        drop_pending_updates: true
      }),
    });

    const result = await setWebhookResponse.json();
    
    return NextResponse.json({
      success: result.ok,
      message: result.ok ? 'Webhook –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook',
      url: WEBHOOK_URL,
      telegram_response: result
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞',
    }, { status: 500 });
  }
}
