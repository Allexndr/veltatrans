import { NextRequest, NextResponse } from 'next/server';
import { getDb } from '@/lib/mongodb';

// –ü—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
const MESSAGES = {
  welcome: `üöõ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Velta Trans!</b>

–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑—ã –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç–∞–≤–∫–æ–π.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
2Ô∏è‚É£ –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã
3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–π—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏

<b>–ù–∞—á–Ω–µ–º?</b> –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:`,

  phoneNotFound: `‚ùå <b>–ù–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ</b>

<b>–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:</b>
‚Ä¢ –í—ã –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å (–Ω—É–∂–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è)
‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞
‚Ä¢ –ù–æ–º–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</b>
‚Ä¢ +7 705 406 06 74
‚Ä¢ 8 705 406 06 74
‚Ä¢ 87054060674
‚Ä¢ 77054060674

–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"`,

  driverFound: (driver: any) => `‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

üë§ <b>${driver.name}</b>
üì± <b>${driver.phone}</b>
üöõ <b>${driver.carNumber}</b> (${driver.carType})
‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥: ${driver.rating}</b>
üìç <b>${driver.location}</b>

<b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?</b>`,

  mainMenu: `üöõ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,

  noActiveOrders: `üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>

–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.

<b>–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã?</b>`,

  noAvailableOrders: `üöõ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>

–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.

<b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º.</b>`
};

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, callback_query } = body;
    
    if (callback_query) {
      return await handleCallback(callback_query);
    }
    
    if (message) {
      return await handleMessage(message);
    }
    
    return NextResponse.json({ success: true });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ driver-bot:', error);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞' }, { status: 500 });
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ (–∫–Ω–æ–ø–∫–∏)
async function handleCallback(callback: any) {
  const { data, from, message } = callback;
  const chatId = message?.chat?.id;
  const userId = from?.id;
  
  if (!chatId || !userId) {
    return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }, { status: 400 });
  }
  
  const db = await getDb();
  
  switch (data) {
    case 'start':
      return await sendMainMenu(chatId);
      
    case 'driver_login':
      return await sendPhoneRequest(chatId);
      
    case 'view_orders':
      return await showDriverOrders(chatId, userId, db);
      
    case 'available_orders':
      return await showAvailableOrders(chatId, db);
      
    case 'update_status':
      return await sendStatusUpdateRequest(chatId);
      
    case 'driver_profile':
      return await showDriverProfile(chatId, userId, db);
      
    case 'back_main':
      return await sendMainMenu(chatId);
      
    default:
      return await sendMainMenu(chatId);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleMessage(message: any) {
  const { text, from, chat } = message;
  const chatId = chat?.id;
  const userId = from?.id;
  
  if (!chatId || !userId) {
    return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' }, { status: 400 });
  }
  
  const db = await getDb();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å
  const userState = await db.collection('user_states').findOne({ userId });
  
  if (!userState?.driverAuthed) {
    // –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –ø—Ä–æ—Å–∏–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    return await handlePhoneInput(chatId, userId, text, db);
  }
  
  // –í–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  return await handleDriverCommand(chatId, userId, text, db);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function handlePhoneInput(chatId: number, userId: number, phone: string, db: any) {
  try {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä
    const normalizedPhone = normalizePhone(phone);
    
    // –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    const driver = await db.collection('drivers').findOne({
      $or: [
        { phone: normalizedPhone },
        { phoneVariants: normalizedPhone }
      ]
    });
    
    if (!driver) {
      return await sendTelegramMessage(chatId, MESSAGES.phoneNotFound, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'register_driver' }],
            [{ text: 'üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', callback_data: 'driver_login' }]
          ]
        }
      });
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await db.collection('user_states').updateOne(
      { userId },
      {
        $set: {
          driverAuthed: true,
          driverData: {
            id: driver.id,
            name: driver.name,
            phone: driver.phone,
            carNumber: driver.carNumber,
            carType: driver.carType
          },
          updatedAt: new Date()
        }
      },
      { upsert: true }
    );
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    return await sendTelegramMessage(chatId, MESSAGES.driverFound(driver), {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'view_orders' }],
          [{ text: 'üöõ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'available_orders' }],
          [{ text: 'üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'update_status' }],
          [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'driver_profile' }]
        ]
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è
async function showDriverOrders(chatId: number, userId: number, db: any) {
  try {
    const userState = await db.collection('user_states').findOne({ userId });
    if (!userState?.driverData?.id) {
      return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
    }
    
    const driverId = userState.driverData.id;
    
    // –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è
    const activeOrders = await db.collection('orders').find({
      driverId,
      status: { $in: ['assigned', 'in_transit', 'warehouse', 'delayed'] }
    }).toArray();
    
    if (activeOrders.length === 0) {
      return await sendTelegramMessage(chatId, MESSAGES.noActiveOrders, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üöõ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'available_orders' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
          ]
        }
      });
    }
    
    let message = `üìã <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å ${activeOrders.length} –∑–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ:\n\n`;
    
    activeOrders.forEach((order, index) => {
      message += `${index + 1}. <b>${order.trackingNumber}</b>\n`;
      message += `   üìç ${order.route.from} ‚Üí ${order.route.to}\n`;
      message += `   üì¶ ${order.description}\n`;
      message += `   üí∞ ${order.price} ${order.currency}\n`;
      message += `   üìÖ –°—Ä–æ–∫: ${new Date(order.deadline).toLocaleDateString('ru-RU')}\n\n`;
    });
    
    return await sendTelegramMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'update_status' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
        ]
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫–∞–∑–æ–≤:', error);
    return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
  }
}

// –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async function showAvailableOrders(chatId: number, db: any) {
  try {
    const availableOrders = await db.collection('orders').find({
      status: 'new',
      driverId: null
    }).limit(10).toArray();
    
    if (availableOrders.length === 0) {
      return await sendTelegramMessage(chatId, MESSAGES.noAvailableOrders, {
        reply_markup: {
          inline_keyboard: [
            [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'available_orders' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
          ]
        }
      });
    }
    
    let message = `üöõ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–î–æ—Å—Ç—É–ø–Ω–æ ${availableOrders.length} –∑–∞–∫–∞–∑–æ–≤:\n\n`;
    
    availableOrders.forEach((order, index) => {
      message += `${index + 1}. <b>${order.trackingNumber}</b>\n`;
      message += `   üìç ${order.route.from} ‚Üí ${order.route.to}\n`;
      message += `   üì¶ ${order.description}\n`;
      message += `   ‚öñÔ∏è ${order.weight} –∫–≥, ${order.volume} –º¬≥\n`;
      message += `   üí∞ ${order.price} ${order.currency}\n`;
      message += `   üìÖ –°—Ä–æ–∫: ${new Date(order.deadline).toLocaleDateString('ru-RU')}\n\n`;
    });
    
    return await sendTelegramMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'available_orders' }],
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
          ]
        }
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤.');
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function sendMainMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üöõ –í–æ–π—Ç–∏ –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å', callback_data: 'driver_login' }],
      [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'view_orders' }],
      [{ text: 'üöõ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'available_orders' }],
      [{ text: 'üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'update_status' }],
      [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'driver_profile' }]
    ]
  };
  
  return await sendTelegramMessage(chatId, MESSAGES.mainMenu, { reply_markup: keyboard });
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async function sendPhoneRequest(chatId: number) {
  return await sendTelegramMessage(chatId, MESSAGES.welcome);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function normalizePhone(phone: string): string {
  let digits = phone.replace(/[^\d]/g, '');
  
  if (digits.startsWith('8')) {
    digits = '7' + digits.slice(1);
  }
  
  return `+${digits}`;
}

async function sendTelegramMessage(chatId: number, text: string, options: any = {}) {
  const token = process.env.TELEGRAM_BOT_TOKEN;
  const url = `https://api.telegram.org/bot${token}/sendMessage`;
  
  const response = await fetch(url, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      chat_id: chatId,
      text: text,
      parse_mode: 'HTML',
      ...options
    })
  });
  
  return NextResponse.json({ success: true });
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏
async function sendStatusUpdateRequest(chatId: number) {
  return await sendTelegramMessage(chatId, 'üìç <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:');
}

async function showDriverProfile(chatId: number, userId: number, db: any) {
  try {
    const userState = await db.collection('user_states').findOne({ userId });
    if (!userState?.driverData) {
      return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    }
    
    const driver = userState.driverData;
    const message = `üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\nüë§ <b>–ò–º—è:</b> ${driver.name}\nüì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}\nüöõ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}\nüîß <b>–¢–∏–ø:</b> ${driver.carType}`;
    
    return await sendTelegramMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
        ]
      }
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    return await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è.');
  }
}
