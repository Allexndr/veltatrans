import { NextRequest, NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const TELEGRAM_CHANNEL_ID = '-1002999769930';

interface TelegramUpdate {
  update_id: number;
  message?: {
    message_id: number;
    from: {
      id: number;
      is_bot: boolean;
      first_name: string;
      last_name?: string;
      username?: string;
      language_code?: string;
    };
    chat: {
      id: number;
      first_name?: string;
      last_name?: string;
      username?: string;
      type: string;
    };
    date: number;
    text?: string;
    contact?: {
      phone_number: string;
      first_name: string;
      last_name?: string;
      user_id?: number;
    };
  };
  callback_query?: {
    id: string;
    from: {
      id: number;
      first_name: string;
      last_name?: string;
      username?: string;
    };
    message?: {
      message_id: number;
      chat: {
        id: number;
        type: string;
      };
    };
    data?: string;
  };
}

interface DriverData {
  userId: number;
  firstName: string;
  lastName?: string;
  username?: string;
  phone: string;
  registrationDate: string;
  status: 'pending' | 'approved' | 'rejected';
}

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
const drivers: Map<number, DriverData> = new Map();

async function sendTelegramMessage(chatId: number, text: string, replyMarkup?: object) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
    ...replyMarkup && { reply_markup: replyMarkup }
  };

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
    }
    
    return response.json();
  } catch (error) {
    console.error('Error sending message:', error);
  }
}

async function sendToChannel(message: string) {
  return sendTelegramMessage(parseInt(TELEGRAM_CHANNEL_ID), message);
}

function getMainMenuKeyboard() {
  return {
    keyboard: [
      [{ text: 'üöõ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è' }],
      [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã' }, { text: 'üìç –ú–æ–π —Å—Ç–∞—Ç—É—Å' }],
      [{ text: 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞' }, { text: '‚ùì –ü–æ–º–æ—â—å' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
}

function getContactKeyboard() {
  return {
    keyboard: [
      [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }],
      [{ text: '‚óÄÔ∏è –ù–∞–∑–∞–¥' }]
    ],
    resize_keyboard: true,
    one_time_keyboard: true
  };
}

export async function POST(request: NextRequest) {
  try {
    const body: TelegramUpdate = await request.json();
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text;
      const userId = message.from.id;

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start') {
        const welcomeMessage = `
üöõ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Velta Trans!</b>

–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π.

<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤  
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ –°–≤—è–∑—å —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é ‚¨áÔ∏è
        `;
        
        await sendTelegramMessage(chatId, welcomeMessage, { reply_markup: getMainMenuKeyboard() });
        return NextResponse.json({ ok: true });
      }

      // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
      if (text === 'üöõ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è') {
        if (drivers.has(userId)) {
          const driver = drivers.get(userId)!;
          let statusText = '';
          
          switch (driver.status) {
            case 'pending':
              statusText = '‚è≥ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏';
              break;
            case 'approved':
              statusText = '‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ';
              break;
            case 'rejected':
              statusText = '‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.';
              break;
          }
          
          await sendTelegramMessage(chatId, statusText);
          return NextResponse.json({ ok: true });
        }

        const registrationMessage = `
üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è</b>

–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ Velta Trans –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ‚¨áÔ∏è
        `;
        
        await sendTelegramMessage(chatId, registrationMessage, { reply_markup: getContactKeyboard() });
        return NextResponse.json({ ok: true });
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
      if (message.contact) {
        const contact = message.contact;
        const driverData: DriverData = {
          userId,
          firstName: message.from.first_name,
          lastName: message.from.last_name,
          username: message.from.username,
          phone: contact.phone_number,
          registrationDate: new Date().toISOString(),
          status: 'pending'
        };

        drivers.set(userId, driverData);

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        const channelMessage = `
üöõ <b>–ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–û–î–ò–¢–ï–õ–Ø</b>

üë§ <b>–ò–º—è:</b> ${driverData.firstName} ${driverData.lastName || ''}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driverData.phone}
üë®‚Äçüíº <b>Username:</b> ${driverData.username ? '@' + driverData.username : '–ù–µ —É–∫–∞–∑–∞–Ω'}
üÜî <b>ID:</b> ${userId}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date().toLocaleString('ru-RU')}

<b>–°—Ç–∞—Ç—É—Å:</b> ‚è≥ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        `;

        await sendToChannel(channelMessage);

        const confirmationMessage = `
‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üë§ <b>–ò–º—è:</b> ${driverData.firstName} ${driverData.lastName || ''}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driverData.phone}

‚è≥ <b>–°—Ç–∞—Ç—É—Å:</b> –ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏

–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
        `;

        await sendTelegramMessage(chatId, confirmationMessage, { reply_markup: getMainMenuKeyboard() });
        return NextResponse.json({ ok: true });
      }

      // –ú–æ–∏ –∑–∞–∫–∞–∑—ã
      if (text === 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã') {
        const driver = drivers.get(userId);
        
        if (!driver || driver.status !== 'approved') {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!');
          return NextResponse.json({ ok: true });
        }

        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
        const ordersMessage = `
üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>

üöõ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b> 0
üì¶ <b>–í –æ–∂–∏–¥–∞–Ω–∏–∏:</b> 0
‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è:</b> 0

<i>–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –±—É–¥—É—Ç –ø–æ—è–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.</i>
        `;

        await sendTelegramMessage(chatId, ordersMessage);
        return NextResponse.json({ ok: true });
      }

      // –ú–æ–π —Å—Ç–∞—Ç—É—Å
      if (text === 'üìç –ú–æ–π —Å—Ç–∞—Ç—É—Å') {
        const driver = drivers.get(userId);
        
        if (!driver) {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!');
          return NextResponse.json({ ok: true });
        }

        let statusText = '';
        let statusEmoji = '';
        
        switch (driver.status) {
          case 'pending':
            statusEmoji = '‚è≥';
            statusText = '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏';
            break;
          case 'approved':
            statusEmoji = '‚úÖ';
            statusText = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω';
            break;
          case 'rejected':
            statusEmoji = '‚ùå';
            statusText = '–û—Ç–∫–ª–æ–Ω–µ–Ω';
            break;
        }

        const statusMessage = `
üìç <b>–í–∞—à —Å—Ç–∞—Ç—É—Å</b>

üë§ <b>–ò–º—è:</b> ${driver.firstName} ${driver.lastName || ''}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}
üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> ${new Date(driver.registrationDate).toLocaleDateString('ru-RU')}

${statusEmoji} <b>–°—Ç–∞—Ç—É—Å:</b> ${statusText}
        `;

        await sendTelegramMessage(chatId, statusMessage);
        return NextResponse.json({ ok: true });
      }

      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞
      if (text === 'üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
        const supportMessage = `
üìû <b>–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–æ–π:</b>
üì± +77002770006
üì± +77010704011  
üì± +77010704022

<b>Email:</b> info@velta-logistics.com

<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>
üïê –ö—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ, 7 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é

<i>–î–ª—è —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–≤–æ–Ω–∏—Ç–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–∞–º.</i>
        `;

        await sendTelegramMessage(chatId, supportMessage);
        return NextResponse.json({ ok: true });
      }

      // –ü–æ–º–æ—â—å
      if (text === '‚ùì –ü–æ–º–æ—â—å') {
        const helpMessage = `
‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>üöõ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è</b>
–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ —Å–∏—Å—Ç–µ–º–µ

<b>üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã</b>  
–ü—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

<b>üìç –ú–æ–π —Å—Ç–∞—Ç—É—Å</b>
–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

<b>üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>
–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
2. –î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
3. –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –≤ –±–æ—Ç–µ
4. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ —Å—Ç–∞—Ç—É—Å

<i>–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.</i>
        `;

        await sendTelegramMessage(chatId, helpMessage);
        return NextResponse.json({ ok: true });
      }

      // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
      if (text === '‚óÄÔ∏è –ù–∞–∑–∞–¥') {
        await sendTelegramMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', { reply_markup: getMainMenuKeyboard() });
        return NextResponse.json({ ok: true });
      }

      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      await sendTelegramMessage(chatId, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ üëá', { reply_markup: getMainMenuKeyboard() });
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram bot webhook is running',
    timestamp: new Date().toISOString()
  });
}