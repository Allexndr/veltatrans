import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID || '-1002999769930';
const ADMIN_ID = '5450018125'; // ID –∞–¥–º–∏–Ω–∞

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö (–≤ serverless —Å—Ä–µ–¥–µ –ø–∏—à–µ–º –≤ /tmp)
const dataDir = process.env.DATA_DIR || path.join(process.cwd(), 'data', 'velta-data');
const driversFile = path.join(dataDir, 'drivers.json');
const ordersFile = path.join(dataDir, 'orders.json');
const userStatesFile = path.join(dataDir, 'user_states.json');
const staffUsersFile = path.join(dataDir, 'staff_users.json');

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(driversFile)) {
  // –ö–æ–ø–∏—Ä—É–µ–º –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ materials/–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π.json –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  const sourceDriversPath = path.resolve(process.cwd(), 'materials', '–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π.json');
  if (fs.existsSync(sourceDriversPath)) {
    try {
      const sourceData = fs.readFileSync(sourceDriversPath, 'utf8');
      const originalDrivers = JSON.parse(sourceData);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
              const convertedDrivers = originalDrivers.map((driver: Record<string, unknown>, index: number) => ({
        id: index + 1,
        name: driver['–í–æ–¥–∏—Ç–µ–ª—å'] || driver['–í–æ–¥–∏—Ç–µ–ª—å'] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        phone: driver['–¢–µ–ª–µ—Ñ–æ–Ω –í–æ–¥–∏—Ç–µ–ª—è'] || driver['–¢–µ–ª–µ—Ñ–æ–Ω –í–æ–¥–∏—Ç–µ–ª—è'] || '',
        carNumber: driver['–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] || driver['–ê–≤—Ç–æ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç'] || '',
        carType: driver['–í–∏–¥ –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞'] || driver['–í–∏–¥ –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞'] || '',
        registeredAt: new Date().toISOString(),
        status: 'active'
      }));
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      fs.writeFileSync(driversFile, JSON.stringify(convertedDrivers, null, 2));
      console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ materials/–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤–æ–¥–∏—Ç–µ–ª–µ–π.json (${convertedDrivers.length} –≤–æ–¥–∏—Ç–µ–ª–µ–π)`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
      fs.writeFileSync(driversFile, '[]');
    }
  } else {
    fs.writeFileSync(driversFile, '[]');
  }
}
if (!fs.existsSync(ordersFile)) {
  fs.writeFileSync(ordersFile, '[]');
}
if (!fs.existsSync(userStatesFile)) {
  fs.writeFileSync(userStatesFile, '{}');
}
if (!fs.existsSync(staffUsersFile)) {
  fs.writeFileSync(staffUsersFile, JSON.stringify({ test: { username: 'test', password: '1234' } }, null, 2));
}

interface Driver {
  id: number;
  name: string;
  phone: string;
  carNumber: string;
  carType: string;
  registeredAt: string;
  status: 'active' | 'inactive';
  rating: number; // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è (0-5)
  totalOrders: number; // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
  completedOrders: number; // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
  ratingCount: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫
  clientRating: number; // –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ (0-5)
  clientRatingCount: number; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ü–µ–Ω–æ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
}

interface Order {
  id: string;
  from: string;
  to: string;
  carType: string;
  description: string;
  createdAt: string;
  status: 'active' | 'assigned' | 'completed';
  bids: Bid[];
  assignedDriver?: number;
  finalPrice?: number;
  trackingNumber?: string;
  clientRating?: number; // –†–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è (1-5)
  driverRating?: number; // –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (1-5)
  clientReview?: string; // –û—Ç–∑—ã–≤ –æ –∫–ª–∏–µ–Ω—Ç–µ
  driverReview?: string; // –û—Ç–∑—ã–≤ –æ –≤–æ–¥–∏—Ç–µ–ª–µ
}

interface Bid {
  driverId: number;
  driverName: string;
  driverPhone: string;
  carNumber: string;
  price: number;
  timestamp: string;
}

interface UserState {
  step?: string;
  orderStep?: string;
  biddingOrderId?: string;
  staffStep?: 'login' | 'password';
  staffLogin?: string;
  staffAuthed?: boolean;
  name?: string;
  phone?: string;
  carNumber?: string;
  carType?: string;
  from?: string;
  to?: string;
  description?: string;
  loginStep?: 'phone';
  driverAuthed?: boolean;
  driverData?: {
    –ò–º—è: string;
    –¢–µ–ª–µ—Ñ–æ–Ω: string;
    –ù–æ–º–µ—Ä_–∞–≤—Ç–æ: string;
    –¢–∏–ø_–¢–°: string;
  };
  adminStep?: 'add_driver_name' | 'add_driver_phone' | 'add_driver_car_number' | 'add_driver_car_type' | 'edit_driver';
  tempDriverName?: string;
  tempDriverPhone?: string;
  tempDriverCarNumber?: string;
  editingDriverId?: number;
  orderNumberForStatus?: string;
  driverId?: number;
}

function normalizePhone(raw: string): string | null {
  if (!raw) return null;
  
  console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', raw);
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  const digits = raw.replace(/\D/g, '');
  console.log('üì± –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:', digits);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
  if (digits.length < 10 || digits.length > 15) {
    console.log('üì± –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞:', digits.length);
    return null;
  }
  
  // –í –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ 870 –∏ 770 - —ç—Ç–æ –æ–¥–∏–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  if (digits.startsWith('870')) {
    // –ó–∞–º–µ–Ω—è–µ–º 870 –Ω–∞ 770 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const result = '+770' + digits.slice(3);
    console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (870‚Üí770):', result);
    return result;
  } else if (digits.startsWith('770')) {
    // –ó–∞–º–µ–Ω—è–µ–º 770 –Ω–∞ 870 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const result = '+870' + digits.slice(3);
    console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω (770‚Üí870):', result);
    return result;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8 –∏–ª–∏ 9, –¥–æ–±–∞–≤–ª—è–µ–º +
  if (digits.startsWith('8') || digits.startsWith('9')) {
    const result = '+' + digits;
    console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω:', result);
    return result;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
  if (digits.startsWith('7')) {
    const result = '+' + digits;
    console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω:', result);
    return result;
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä —É–∂–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (raw.startsWith('+')) {
    console.log('üì± –£–∂–µ —Å +:', raw);
    return raw;
  }
  
  console.log('üì± –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å');
  return null;
}

async function tryQuickRegister(userId: number, chatId: number, text: string) {
  const drivers = loadDrivers();
  if (drivers[userId]) return false;
  const parts = text.split(/[;\n,]/).map(p => p.trim()).filter(Boolean);
  if (parts.length < 4) return false;
  const [name, phoneRaw, carNumber, carType] = parts;
  const phone = normalizePhone(phoneRaw);
  if (!phone) return false;

  drivers[userId] = {
    id: userId,
    name,
    phone,
    carNumber,
    carType,
    registeredAt: new Date().toISOString(),
    status: 'active'
  };
  saveDrivers(drivers);

  await sendTelegramMessage(chatId, `‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üë§ –ò–º—è: ${name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}
üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${carNumber}
üîß –¢–∏–ø –¢–°: ${carType}

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö!`);
  await sendTelegramMessage(CHANNEL_ID, `üöõ <b>–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>

üë§ <b>–ò–º—è:</b> ${name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${phone}
üöõ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${carNumber}
üîß <b>–¢–∏–ø –¢–°:</b> ${carType}
üÜî <b>Telegram ID:</b> ${userId}`);
  return true;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function loadDrivers(): Record<string, Driver> {
  try {
    return JSON.parse(fs.readFileSync(driversFile, 'utf8'));
  } catch (e) {
    return {};
  }
}

function saveDrivers(drivers: Record<string, Driver>) {
  fs.writeFileSync(driversFile, JSON.stringify(drivers, null, 2));
}

function loadOrders(): Record<string, Order> {
  try {
    return JSON.parse(fs.readFileSync(ordersFile, 'utf8'));
  } catch (e) {
    return {};
  }
}

function saveOrders(orders: Record<string, Order>) {
  fs.writeFileSync(ordersFile, JSON.stringify(orders, null, 2));
}

function loadUserStates(): Record<string, UserState> {
  try {
    return JSON.parse(fs.readFileSync(userStatesFile, 'utf8'));
  } catch (e) {
    return {};
  }
}

function saveUserStates(states: Record<string, UserState>) {
  fs.writeFileSync(userStatesFile, JSON.stringify(states, null, 2));
}

function loadStaffUsers(): Record<string, { username: string; password: string }> {
  try {
    return JSON.parse(fs.readFileSync(staffUsersFile, 'utf8'));
  } catch (e) {
          return {} as Record<string, { username: string; password: string }>;
  }
}

async function sendMainMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üöõ –í–æ–¥–∏—Ç–µ–ª—è–º', callback_data: 'menu_drivers' }],
      [{ text: 'üì¶ –ö–ª–∏–µ–Ω—Ç–∞–º', callback_data: 'menu_clients' }],
      [{ text: '‚≠ê –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'show_rating' }],
      [{ text: 'üë®\u200düíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º', callback_data: 'menu_staff' }]
    ]
  };
  await sendTelegramMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', keyboard);
}

async function sendDriversMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è', callback_data: 'register_driver' }],
      [{ text: 'üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data: 'driver_login' }],
      [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', callback_data: 'share_phone' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
  await sendTelegramMessage(chatId, 'üöõ <b>–†–∞–∑–¥–µ–ª ¬´–í–æ–¥–∏—Ç–µ–ª—è–º¬ª</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

async function sendDriverMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'view_active_orders' }],
      [{ text: 'üìö –ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'view_closed_orders' }],
      [{ text: 'üöõ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'view_available_orders' }],
      [{ text: 'üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'update_order_status' }],
      [{ text: '‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'my_driver_rating' }],
      [{ text: 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'configure_notifications' }],
      [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'driver_profile' }],
      [{ text: 'üîê –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'driver_logout' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
  await sendTelegramMessage(chatId, 'üöõ <b>–ú–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

async function sendOrderStatusUpdateMenu(chatId: number, userId: number, userStates: Record<string, UserState>) {
  const userState = userStates[userId] || {};
  userState.step = 'select_order_for_status';
  userStates[userId] = userState;
  saveUserStates(userStates);
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìù –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤—Ä—É—á–Ω—É—é', callback_data: 'manual_order_number' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
    ]
  };
  
  await sendTelegramMessage(chatId, 'üìç <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:', keyboard);
}

async function sendClientsMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîé –û—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑', callback_data: 'client_track' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
  await sendTelegramMessage(chatId, '–†–∞–∑–¥–µ–ª ¬´–ö–ª–∏–µ–Ω—Ç–∞–º¬ª. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏.', keyboard);
}

async function sendStaffLogin(chatId: number, userStates: Record<string, UserState>, userId: number) {
  userStates[userId] = { ...userStates[userId], staffStep: 'login', staffAuthed: false };
  saveUserStates(userStates);
  await sendTelegramMessage(chatId, 'üë®\u200düíº –í—Ö–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\n\n–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function generateOrderNumber(driverId: number): string {
  const orderNumber = Math.floor(Math.random() * 100000);
  return `${driverId}-${orderNumber}`;
}

async function sendTelegramMessage(chatId: string | number, text: string, replyMarkup?: object) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup,
      }),
    });

    return await response.json();
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return { ok: false, error: error };
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É (—Å–Ω–∏–º–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä –≤ Telegram)
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false) {
  try {
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert
      })
    });
  } catch (error) {
    console.error('Error answering callback query:', error);
  }
}

// –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º
async function broadcastOrderToDrivers(orderId: string, order: Order) {
  const drivers = loadDrivers();
  let sentCount = 0;
  
  for (const driver of Object.values(drivers)) {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –¢–°
    if (driver.carType.toLowerCase().includes(order.carType.toLowerCase()) || 
        order.carType.toLowerCase().includes(driver.carType.toLowerCase())) {
      
      const orderText = `üöõ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${order.from} ‚Üí ${order.to}
<b>–¢–∏–ø –¢–°:</b> ${order.carType}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${order.description}

–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É', callback_data: `bid_${orderId}` }],
          [{ text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip' }]
        ]
      };

      await sendTelegramMessage(driver.id, orderText, keyboard);
      sentCount++;
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –æ —Ä–∞—Å—Å—ã–ª–∫–µ
  await sendTelegramMessage(CHANNEL_ID, `üì¢ <b>–ó–∞–∫–∞–∑ ${orderId} —Ä–∞–∑–æ—Å–ª–∞–Ω!</b>

<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${order.from} ‚Üí ${order.to}
<b>–¢–∏–ø –¢–°:</b> ${order.carType}
<b>–†–∞–∑–æ—Å–ª–∞–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:</b> ${sentCount}

–û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω...`);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text || '';
      const userId = message.from.id;
      const userName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      const drivers = loadDrivers();
      const userStates = loadUserStates();
      const userState = userStates[userId] || {};

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start') {
        // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        delete userStates[userId];
        saveUserStates(userStates);
        await sendMainMenu(chatId);
        return NextResponse.json({ success: true }); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
      else if (text === '‚¨ÖÔ∏è –ù–∞–∑–∞–¥') {
        // –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –Ω–∞–∑–∞–¥: –µ—Å–ª–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ‚Äî —à–∞–≥ –Ω–∞–∑–∞–¥, –∏–Ω–∞—á–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if (userState.step === 'phone') {
          userState.step = 'name';
          userStates[userId] = userState;
          saveUserStates(userStates);
          await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:', { keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]], resize_keyboard: true });
        } else if (userState.step === 'carNumber') {
          userState.step = 'phone';
          userStates[userId] = userState;
          saveUserStates(userStates);
          await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 700 123 45 67):', { keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]], resize_keyboard: true });
        } else if (userState.step === 'carType') {
          userState.step = 'carNumber';
          userStates[userId] = userState;
          saveUserStates(userStates);
          await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í01):', { keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]], resize_keyboard: true });
        } else {
          await sendDriversMenu(chatId);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
      else if (message.contact) {
        const contact = message.contact;
        if (contact.user_id === userId) {
          const phone = contact.phone_number;
          const normalizedPhone = normalizePhone(phone);
          if (normalizedPhone) {
            await sendTelegramMessage(chatId, `üì± <b>–ù–æ–º–µ—Ä –ø–æ–ª—É—á–µ–Ω!</b>\n\n–¢–µ–ª–µ—Ñ–æ–Ω: ${normalizedPhone}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`, {
              keyboard: {
                keyboard: [
                  [{ text: 'üìù –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' }],
                  [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
                ],
                resize_keyboard: true,
                one_time_keyboard: false
              }
            });
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userState.phone = normalizedPhone;
            userStates[userId] = userState;
            saveUserStates(userStates);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return NextResponse.json({ success: true });
          }
        } else {
          await sendTelegramMessage(chatId, '‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º.');
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      else if (text === 'üìù –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é') {
        if (userState.phone) {
          userState.step = 'name';
          userStates[userId] = userState;
          saveUserStates(userStates);
          await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:', {
            keyboard: {
              keyboard: [
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
              ],
              resize_keyboard: true,
              one_time_keyboard: false
            }
          });
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.');
          return NextResponse.json({ success: true });
        }
      }
      
      // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–µ)
      else if (text === '/register' || text.toLowerCase() === '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' || text.toLowerCase() === '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è') {
        const drivers = loadDrivers();
        if (drivers[userId]) {
          await sendTelegramMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders –∏–ª–∏ /status.');
        } else {
          await startDriverRegistration(userId, chatId);
        }
      }

      // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (—Å–∞–π—Ç)
      else if (text === '/calculate') {
        const calculateText = `üí∞ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏</b>

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ:
üåê <a href="https://velta-logistics.com">velta-logistics.com</a>

–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:
üìû +7 700 277 00 06
üìß info@velta-logistics.com`;
        await sendTelegramMessage(chatId, calculateText);
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      else if (text === '/track') {
        const trackText = `üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>WT123456-1700000000000</code>

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–æ—Ä–º–æ–π –Ω–∞ —Å–∞–π—Ç–µ:
üåê <a href="https://velta-logistics.com">velta-logistics.com</a>`;
        await sendTelegramMessage(chatId, trackText);
      }
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      else if (text === '/contact') {
        const contactText = `üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>

–¢–µ–ª–µ—Ñ–æ–Ω: +7 700 277 00 06
Email: info@velta-logistics.com
–°–∞–π—Ç: <a href="https://velta-logistics.com">velta-logistics.com</a>`;
        await sendTelegramMessage(chatId, contactText);
      }

      // –†–µ–π—Ç–∏–Ω–≥–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      else if (text === '/rating' || text.toLowerCase() === '—Ä–µ–π—Ç–∏–Ω–≥') {
        await showTopDrivers(chatId);
      }
      else if (text === '/myrating' || text.toLowerCase() === '–º–æ–π —Ä–µ–π—Ç–∏–Ω–≥') {
        if (userState.driverAuthed && userState.driverData) {
          const driverPhone = userState.driverData.–¢–µ–ª–µ—Ñ–æ–Ω;
          const drivers = loadDrivers();
          const driver = Object.values(drivers).find(d => d.phone === driverPhone);
          if (driver) {
            await showDriverRating(chatId, driver.id);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
          }
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
        }
      }

      // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
      else if (text === '/analytics' || text.toLowerCase() === '–∞–Ω–∞–ª–∏—Ç–∏–∫–∞') {
        if (userId.toString() === ADMIN_ID) {
          await showAnalytics(chatId);
        } else {
          await sendTelegramMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
        }
      }
      else if (text === '/stats' || text.toLowerCase() === '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞') {
        if (userId.toString() === ADMIN_ID) {
          await showAnalytics(chatId);
        } else {
          await sendTelegramMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.');
        }
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      else if (text === '/notifications' || text.toLowerCase() === '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è') {
        if (userState.driverAuthed && userState.driverData) {
          const driverPhone = userState.driverData.–¢–µ–ª–µ—Ñ–æ–Ω;
          const drivers = loadDrivers();
          const driver = Object.values(drivers).find(d => d.phone === driverPhone);
          if (driver) {
            await showNotificationSettings(chatId, driver.id);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          }
        } else {
          await showNotificationSettings(chatId);
        }
      }

      // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      else if (text === '/admin' && userId.toString() === ADMIN_ID) {
        const adminText = `üë®‚Äçüíº <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        const keyboard = {
          inline_keyboard: [
            [{ text: 'üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'create_order' }],
            [{ text: 'üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'list_drivers' }],
            [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'list_orders' }]
          ]
        };

        await sendTelegramMessage(chatId, adminText, keyboard);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É (Excel) - –ü–ï–†–í–´–ú –ü–†–ò–û–†–ò–¢–ï–¢–û–ú
      if (userState.loginStep === 'phone') {
        const phone = normalizePhone(text) || text.trim();
        const found = findDriverInJsonByPhone(phone);
        if (found) {
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é JSON –±–∞–∑—É, –µ—Å–ª–∏ –Ω–µ—Ç
          const d = loadDrivers();
          if (!d[userId]) {
            d[userId] = {
              id: userId,
              name: found.name,
              phone: found.phone,
              carNumber: found.carNumber,
              carType: found.carType,
              registeredAt: new Date().toISOString(),
              status: 'active',
              rating: 0,
              totalOrders: 0,
              completedOrders: 0,
              ratingCount: 0,
              clientRating: 0,
              clientRatingCount: 0
            };
            saveDrivers(d);
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞ —É —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
            const driver = d[userId];
            if (typeof driver.rating === 'undefined') {
              driver.rating = 0;
              driver.totalOrders = 0;
              driver.completedOrders = 0;
              driver.ratingCount = 0;
              driver.clientRating = 0;
              driver.clientRatingCount = 0;
              saveDrivers(d);
            }
          }
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –≤ userState
          userState.driverAuthed = true;
          userState.driverData = {
            –ò–º—è: found.name,
            –¢–µ–ª–µ—Ñ–æ–Ω: found.phone,
            –ù–æ–º–µ—Ä_–∞–≤—Ç–æ: found.carNumber,
            –¢–∏–ø_–¢–°: found.carType
          };
          delete userState.loginStep;
          userStates[userId] = userState;
          saveUserStates(userStates);
          
          await sendTelegramMessage(chatId, `‚úÖ <b>–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\nüë§ <b>${found.name}</b>\nüì± <b>${found.phone}</b>\nüöõ <b>${found.carNumber}</b> (${found.carType})`, { reply_markup: { remove_keyboard: true } });
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
          await sendDriverMenu(chatId);
        } else {
          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ö–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
          delete userState.loginStep;
          userStates[userId] = userState;
          saveUserStates(userStates);
          
          await sendTelegramMessage(chatId, '‚ùå –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞\n‚Ä¢ –§–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 705 406 06 74)\n\n–ï—Å–ª–∏ –≤—ã –Ω–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"');
          
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é –≤–æ–¥–∏—Ç–µ–ª—è
          await sendDriversMenu(chatId);
        }
      }
      
      // –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞/–ø–∞—Ä–æ–ª—è
      else if (userState.staffStep === 'login') {
        userState.staffLogin = text.trim();
        userState.staffStep = 'password';
        userStates[userId] = userState;
        saveUserStates(userStates);
        await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:');
      } else if (userState.staffStep === 'password') {
        const staffUsers = loadStaffUsers();
        const login = userState.staffLogin || '';
        const pass = text.trim();
        const valid = Object.values(staffUsers).some(u => u.username === login && u.password === pass);
        if (valid) {
          userState.staffAuthed = true;
          userState.staffStep = undefined;
          userStates[userId] = userState;
          saveUserStates(userStates);
          const keyboard = { 
            inline_keyboard: [
              [{ text: 'üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'create_order' }], 
              [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'list_orders' }], 
              [{ text: 'üë• –í–æ–¥–∏—Ç–µ–ª–∏', callback_data: 'list_drivers' }], 
              [{ text: 'üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏', callback_data: 'admin_manage_drivers' }], 
              [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
            ] 
          };
          await sendTelegramMessage(chatId, '‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', keyboard);
        } else {
          await sendTelegramMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          await sendStaffLogin(chatId, userStates, userId);
        }
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - –ü–û–°–õ–ï –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–∞
      else if (userState.step) {
        await handleRegistrationStep(userId, chatId, text, userState, userStates);
      }
      
      // –ü–æ–ø—ã—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π: –ò–º—è; +7700...; –ê123–ë–í01; –§—É—Ä–∞ 20—Ç
      else if (await tryQuickRegister(userId, chatId, text)) {
        // —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      else if (userState.orderStep) {
        await handleOrderCreationStep(userId, chatId, text, userState, userStates);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
      else if (userState.biddingOrderId) {
        await handleBidStep(userId, chatId, text, userState, userStates);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
      else if (userState.adminStep) {
        await handleAdminStep(userId, chatId, text, userState, userStates);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
      else if (userState.step === 'enter_order_number') {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        const orderNumber = text.trim();
        userState.orderNumberForStatus = orderNumber;
        userState.step = 'enter_order_status';
        userStates[userId] = userState;
        saveUserStates(userStates);
        
        const keyboard = {
          inline_keyboard: [
            [{ text: 'üöõ –í –ø—É—Ç–∏', callback_data: 'status_in_transit' }],
            [{ text: 'üì¶ –ù–∞ —Å–∫–ª–∞–¥–µ', callback_data: 'status_warehouse' }],
            [{ text: '‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω', callback_data: 'status_delivered' }],
            [{ text: '‚ö†Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞', callback_data: 'status_delayed' }],
            [{ text: 'üìù –ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å', callback_data: 'status_custom' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
          ]
        };
        
        await sendTelegramMessage(chatId, `üìù <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞</b>\n\n–ó–∞–∫–∞–∑: <code>${orderNumber}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:`, keyboard);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      else if (userState.step === 'enter_custom_status') {
        const customStatus = text.trim();
        if (customStatus.length < 3) {
          await sendTelegramMessage(chatId, '‚ùå –°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
          return NextResponse.json({ success: true });
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
        try {
          const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/driver/location`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
              driverId: userState.driverId,
              orderId: userState.orderNumberForStatus,
              lat: 0, // –í–æ–¥–∏—Ç–µ–ª—å –º–æ–∂–µ—Ç —É–∫–∞–∑–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–∑–∂–µ
              lng: 0,
              location: '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram',
              status: customStatus,
              description: `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º: ${customStatus}`,
              timestamp: new Date().toISOString()
            })
          });
          
          if (response.ok) {
            await sendTelegramMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ <code>${userState.orderNumberForStatus}</code> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <b>${customStatus}</b>`);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
          }
        } catch (error) {
          await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
        
        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        delete userState.step;
        delete userState.orderNumberForStatus;
        delete userState.driverId;
        userStates[userId] = userState;
        saveUserStates(userStates);
        
        await sendDriverMenu(chatId);
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
    else if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      const userId = callbackQuery.from.id;
      const callbackQueryId = callbackQuery.id;

      if (data === 'register_driver') {
        await answerCallbackQuery(callbackQueryId);
        await startDriverRegistration(userId, chatId);
      } else if (data === 'menu_drivers') {
        await answerCallbackQuery(callbackQueryId);
        await sendDriversMenu(chatId);
      } else if (data === 'menu_clients') {
        await answerCallbackQuery(callbackQueryId);
        await sendClientsMenu(chatId);
      } else if (data === 'menu_staff') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        await sendStaffLogin(chatId, userStates, userId);
      } else if (data === 'back_main') {
        await answerCallbackQuery(callbackQueryId);
        await sendMainMenu(chatId);
      } else if (data === 'show_rating') {
        await answerCallbackQuery(callbackQueryId);
        await showTopDrivers(chatId);
      } else if (data === 'driver_login') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        userStates[userId] = { ...(userStates[userId] || {}), loginStep: 'phone' };
        saveUserStates(userStates);
        await sendTelegramMessage(chatId, 'üîê <b>–í—Ö–æ–¥ –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–∞–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–º–µ—Ä: +7 705 406 06 74):\n\n<i>–ü–∞—Ä–æ–ª—å –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Ö–æ–¥ —Ç–æ–ª—å–∫–æ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>');
      } else if (data === 'share_phone') {
        await answerCallbackQuery(callbackQueryId);
        const keyboard = {
          keyboard: [
            [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º', request_contact: true }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]
          ],
          resize_keyboard: true,
          one_time_keyboard: false
        };
        await sendTelegramMessage(chatId, 'üì± <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', keyboard);
      } else if (data === 'client_track') {
        await answerCallbackQuery(callbackQueryId);
        await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>WT123456-1700000000000</code>');
      } else if (data === 'info') {
        await answerCallbackQuery(callbackQueryId);
        const infoText = `‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>

<b>Velta Trans</b> - –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –í—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
2. –ü–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É
4. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
üìû +7 700 277 00 06
üìß info@velta-logistics.com
üåê https://velta-logistics.com`;

        await sendTelegramMessage(chatId, infoText);
      } else if (data === 'create_order' && userId.toString() === ADMIN_ID) {
        await answerCallbackQuery(callbackQueryId);
        await startOrderCreation(userId, chatId);
      } else if (data === 'list_drivers' && userId.toString() === ADMIN_ID) {
        await answerCallbackQuery(callbackQueryId);
        await listDrivers(chatId);
      } else if (data === 'list_orders' && userId.toString() === ADMIN_ID) {
        await answerCallbackQuery(callbackQueryId);
        await listActiveOrders(chatId, userId);
      } else if (data.startsWith('bid_')) {
        await answerCallbackQuery(callbackQueryId);
        const orderId = data.split('_')[1];
        await startBidding(userId, chatId, orderId);
      } else if (data.startsWith('select_driver_')) {
        await answerCallbackQuery(callbackQueryId, '–í–æ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω');
        const parts = data.split('_');
        const orderId = parts[2];
        const driverId = parts[3];
        await selectDriver(chatId, orderId, parseInt(driverId));
      } else if (data === 'view_orders') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverAuthed) {
          await listActiveOrders(chatId, userId);
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
          await sendDriversMenu(chatId);
        }
      } else if (data === 'view_active_orders') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverAuthed && userState.driverData) {
          // –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          const driverPhone = userState.driverData.–¢–µ–ª–µ—Ñ–æ–Ω;
          const drivers = loadDrivers();
          const driver = Object.values(drivers).find(d => d.phone === driverPhone);
          
          if (driver) {
            await showDriverActiveOrders(chatId, driver.id);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.');
            await sendDriverMenu(chatId);
          }
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
          await sendDriversMenu(chatId);
        }
      } else if (data === 'view_closed_orders') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverAuthed && userState.driverData) {
          // –ü–æ–ª—É—á–∞–µ–º ID –≤–æ–¥–∏—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
          const driverPhone = userState.driverData.–¢–µ–ª–µ—Ñ–æ–Ω;
          const drivers = loadDrivers();
          const driver = Object.values(drivers).find(d => d.phone === driverPhone);
          
          if (driver) {
            await showDriverClosedOrders(chatId, driver.id);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.');
            await sendDriverMenu(chatId);
          }
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
          await sendDriversMenu(chatId);
        }
      } else if (data === 'view_available_orders') {
        await answerCallbackQuery(callbackQueryId);
        await showAvailableOrders(chatId);
      } else if (data === 'refresh_available_orders') {
        await answerCallbackQuery(callbackQueryId);
        await showAvailableOrders(chatId);
      } else if (data === 'update_order_status') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverAuthed) {
          await sendOrderStatusUpdateMenu(chatId, userId, userStates);
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
          await sendDriversMenu(chatId);
        }
      } else if (data === 'manual_order_number') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        userState.step = 'enter_order_number';
        userStates[userId] = userState;
        saveUserStates(userStates);
        await sendTelegramMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:');
      } else if (data.startsWith('status_')) {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        const statusType = data.split('_')[1];
        
        if (statusType === 'custom') {
          userState.step = 'enter_custom_status';
          userStates[userId] = userState;
          saveUserStates(userStates);
          await sendTelegramMessage(chatId, 'üìù –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:');
        } else {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API
          const statusMap: Record<string, string> = {
            'in_transit': '–í –ø—É—Ç–∏',
            'warehouse': '–ù–∞ —Å–∫–ª–∞–¥–µ',
            'delivered': '–î–æ—Å—Ç–∞–≤–ª–µ–Ω',
            'delayed': '–ó–∞–¥–µ—Ä–∂–∫–∞'
          };
          
          const newStatus = statusMap[statusType] || statusType;
          
          try {
            const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/driver/location`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                driverId: userState.driverId || 1, // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID 1
                orderId: userState.orderNumberForStatus,
                lat: 0,
                lng: 0,
                location: '–û–±–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram',
                status: newStatus,
                description: `–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª–µ–º: ${newStatus}`,
                timestamp: new Date().toISOString()
              })
            });
            
            if (response.ok) {
              await sendTelegramMessage(chatId, `‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ <code>${userState.orderNumberForStatus}</code> —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <b>${newStatus}</b>`);
            } else {
              await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            }
          } catch (error) {
            await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
          
          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
          delete userState.step;
          delete userState.orderNumberForStatus;
          delete userState.driverId;
          userStates[userId] = userState;
          saveUserStates(userStates);
          
          await sendDriverMenu(chatId);
        }
      } else if (data === 'my_driver_rating') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverData) {
          const driverPhone = userState.driverData.–¢–µ–ª–µ—Ñ–æ–Ω;
          const drivers = loadDrivers();
          const driver = Object.values(drivers).find(d => d.phone === driverPhone);
          if (driver) {
            await showDriverRating(chatId, driver.id);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
          }
        } else {
          await sendTelegramMessage(chatId, '‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
        }
      } else if (data === 'driver_profile') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverData) {
          const driver = userState.driverData;
          await sendTelegramMessage(chatId, `üë§ <b>–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n<b>–ò–º—è:</b> ${driver.–ò–º—è}\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.–¢–µ–ª–µ—Ñ–æ–Ω}\n<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.–ù–æ–º–µ—Ä_–∞–≤—Ç–æ}\n<b>–¢–∏–ø –¢–°:</b> ${driver.–¢–∏–ø_–¢–°}`);
        } else {
          await sendTelegramMessage(chatId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
        }
      } else if (data === 'driver_logout') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        delete userStates[userId];
        saveUserStates(userStates);
        await sendTelegramMessage(chatId, '‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
        await sendMainMenu(chatId);
      } else if (data === 'skip_order') {
        await answerCallbackQuery(callbackQueryId, '–ó–∞–∫–∞–∑ –ø—Ä–æ–ø—É—â–µ–Ω');
        await sendTelegramMessage(chatId, '‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–æ–ø—É—â–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É...');
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
      else if (data.startsWith('rate_')) {
        await answerCallbackQuery(callbackQueryId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!');
        const rating = parseInt(data.split('_')[1]);
        const userStates = loadUserStates();
        await processRating(chatId, rating, userStates);
      }
      else if (data === 'skip_rating') {
        await answerCallbackQuery(callbackQueryId, '–û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞');
        const userStates = loadUserStates();
        const userId = chatId.toString();
        const userState = userStates[userId];
        if (userState) {
          delete userState.ratingOrderId;
          delete userState.ratingType;
          userStates[userId] = userState;
          saveUserStates(userStates);
        }
        await sendTelegramMessage(chatId, '‚úÖ –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
      }
      else if (data === 'driver_stats') {
        await answerCallbackQuery(callbackQueryId);
        await showTopDrivers(chatId, 20); // –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
      }
      else if (data.startsWith('rate_driver_')) {
        await answerCallbackQuery(callbackQueryId);
        const orderId = data.split('_')[2];
        const userStates = loadUserStates();
        await requestOrderRating(chatId, orderId, false); // –ö–ª–∏–µ–Ω—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      else if (data === 'show_analytics') {
        await answerCallbackQuery(callbackQueryId);
        await showAnalytics(chatId);
      }
      else if (data === 'detailed_analytics') {
        await answerCallbackQuery(callbackQueryId);
        await showDetailedAnalytics(chatId);
      }
      else if (data === 'drivers_analytics') {
        await answerCallbackQuery(callbackQueryId);
        await showDriversAnalytics(chatId);
      }
      else if (data === 'finance_analytics') {
        await answerCallbackQuery(callbackQueryId);
        await showFinanceAnalytics(chatId);
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      else if (data === 'enable_notifications') {
        await answerCallbackQuery(callbackQueryId);
        const subscriberId = subscribeToNotifications(chatId);
        await sendTelegramMessage(chatId, `‚úÖ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å:\n‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã\n‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞\n‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è`);
      }
      else if (data === 'disable_notifications') {
        await answerCallbackQuery(callbackQueryId);
        unsubscribeFromNotifications(chatId);
        await sendTelegramMessage(chatId, 'üîï <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
      }
      else if (data === 'configure_filters') {
        await answerCallbackQuery(callbackQueryId);
        await sendTelegramMessage(chatId, '‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤</b>\n\n–§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.');
      }
      else if (data === 'configure_notifications') {
        await answerCallbackQuery(callbackQueryId);
        const userStates = loadUserStates();
        const userState = userStates[userId] || {};
        if (userState.driverAuthed && userState.driverData) {
          const driverPhone = userState.driverData.–¢–µ–ª–µ—Ñ–æ–Ω;
          const drivers = loadDrivers();
          const driver = Object.values(drivers).find(d => d.phone === driverPhone);
          if (driver) {
            await showNotificationSettings(chatId, driver.id);
          } else {
            await sendTelegramMessage(chatId, '‚ùå –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
          }
        } else {
          await showNotificationSettings(chatId);
        }
      }

      // ===== –ê–¥–º–∏–Ω—Å–∫–∏–µ callback'–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ =====
      else if (data === 'admin_manage_drivers') {
        await answerCallbackQuery(callbackQueryId);
        await sendDriversManagementMenu(chatId);
      } else if (data === 'admin_list_drivers') {
        await answerCallbackQuery(callbackQueryId);
        await sendDriversList(chatId);
      } else if (data === 'admin_add_driver') {
        await answerCallbackQuery(callbackQueryId);
        await sendAddDriverForm(chatId);
      } else if (data === 'admin_edit_driver') {
        await answerCallbackQuery(callbackQueryId);
        await sendEditDriverForm(chatId);
      } else if (data === 'admin_delete_driver') {
        await answerCallbackQuery(callbackQueryId);
        await sendDeleteDriverForm(chatId);
      } else if (data === 'admin_drivers_stats') {
        await answerCallbackQuery(callbackQueryId);
        await sendDriversStats(chatId);
      } else if (data.startsWith('admin_edit_driver_')) {
        await answerCallbackQuery(callbackQueryId);
        const driverId = parseInt(data.split('_')[3]);
        await startEditDriver(chatId, driverId);
      } else if (data.startsWith('admin_delete_driver_')) {
        await answerCallbackQuery(callbackQueryId);
        const driverId = parseInt(data.split('_')[3]);
        await confirmDeleteDriver(chatId, driverId);
      } else if (data.startsWith('confirm_delete_driver_')) {
        await answerCallbackQuery(callbackQueryId);
        const driverId = parseInt(data.split('_')[3]);
        const success = deleteDriverById(driverId);
        
        if (success) {
          await sendTelegramMessage(chatId, '‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        } else {
          await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.');
        }
        
        await sendDriversManagementMenu(chatId);
      } else if (data === 'back_to_admin') {
        await answerCallbackQuery(callbackQueryId);
        await sendAdminMenu(chatId);
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
async function startDriverRegistration(userId: number, chatId: number) {
  const userStates = loadUserStates();
  userStates[userId] = { ...(userStates[userId] || {}), step: 'name' };
  saveUserStates(userStates);
  const keyboard = {
    keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]],
    resize_keyboard: true,
    one_time_keyboard: false
  };
  await sendTelegramMessage(chatId, 'üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:', keyboard);
}

async function handleRegistrationStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  const drivers = loadDrivers();
  
  if (userState.step === 'name') {
    userState.name = text;
    userState.step = 'phone';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 700 123 45 67):', { keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]], resize_keyboard: true });
  } else if (userState.step === 'phone') {
    userState.phone = text;
    userState.step = 'carNumber';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í01):', { keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]], resize_keyboard: true });
  } else if (userState.step === 'carNumber') {
    userState.carNumber = text;
    userState.step = 'carType';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç, –ì–∞–∑–µ–ª—å, –¢–µ–Ω—Ç 10—Ç):', { keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' }]], resize_keyboard: true });
  } else if (userState.step === 'carType') {
    userState.carType = text;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    drivers[userId] = {
      id: userId,
      name: userState.name!,
      phone: userState.phone!,
      carNumber: userState.carNumber!,
      carType: userState.carType!,
      registeredAt: new Date().toISOString(),
      status: 'active',
      rating: 0,
      totalOrders: 0,
      completedOrders: 0,
      ratingCount: 0,
      clientRating: 0,
      clientRatingCount: 0
    };
    
    saveDrivers(drivers);
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ Excel –ë–î
    try {
              appendDriverToJson({
          name: userState.name!,
          phone: userState.phone!,
          carNumber: userState.carNumber!,
          carType: userState.carType!
        });
    } catch {}
    delete userStates[userId];
    saveUserStates(userStates);
    
    const successText = `‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üë§ –ò–º—è: ${userState.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userState.phone}
üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${userState.carNumber}
üîß –¢–∏–ø –¢–°: ${userState.carType}

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö!`;

    await sendTelegramMessage(chatId, successText, {
      reply_markup: { remove_keyboard: true }
    });
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ
    await sendTelegramMessage(CHANNEL_ID, `üöõ <b>–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>

üë§ <b>–ò–º—è:</b> ${userState.name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${userState.phone}
üöõ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${userState.carNumber}
üîß <b>–¢–∏–ø –¢–°:</b> ${userState.carType}
üÜî <b>Telegram ID:</b> ${userId}`);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function startOrderCreation(userId: number, chatId: number) {
  const userStates = loadUserStates();
  userStates[userId] = { orderStep: 'from' };
  saveUserStates(userStates);
  
  await sendTelegramMessage(chatId, `üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>

–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
}

async function handleOrderCreationStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  if (userState.orderStep === 'from') {
    userState.from = text;
    userState.orderStep = 'to';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:');
  } else if (userState.orderStep === 'to') {
    userState.to = text;
    userState.orderStep = 'carType';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –¢–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç, –¢–µ–Ω—Ç, –ì–∞–∑–µ–ª—å):');
  } else if (userState.orderStep === 'carType') {
    userState.carType = text;
    userState.orderStep = 'description';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞:');
  } else if (userState.orderStep === 'description') {
    userState.description = text;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderId = Date.now().toString();
    const orders = loadOrders();
    
    orders[orderId] = {
      id: orderId,
      from: userState.from!,
      to: userState.to!,
      carType: userState.carType!,
      description: userState.description!,
      createdAt: new Date().toISOString(),
      status: 'active',
      bids: []
    };
    
    saveOrders(orders);
    delete userStates[userId];
    saveUserStates(userStates);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≤–æ–¥–∏—Ç–µ–ª—è–º
    await broadcastOrderToDrivers(orderId, orders[orderId]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
    const orderMessage = `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b> ${order.from} ‚Üí ${order.to}\n–¢–∏–ø –¢–°: ${order.carType}\n–í–µ—Å: ${order.weight} –∫–≥\n–¶–µ–Ω–∞: ${order.finalPrice} —Ç–µ–Ω–≥–µ`;
    await broadcastNotification('new_order', orderMessage, { orderId, order: orders[orderId] });

    await sendTelegramMessage(chatId, `‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>

<b>ID –∑–∞–∫–∞–∑–∞:</b> ${orderId}
<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${userState.from} ‚Üí ${userState.to}
<b>–¢–∏–ø –¢–°:</b> ${userState.carType}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userState.description}

–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ.`);
  }
}

// –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤
async function startBidding(userId: number, chatId: number, orderId: string) {
  const orders = loadOrders();
  const drivers = loadDrivers();
  
  if (!orders[orderId]) {
    await sendTelegramMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }
  
  if (!drivers[userId]) {
    await sendTelegramMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
    return NextResponse.json({ success: true });
  }
  
  const userStates = loadUserStates();
  userStates[userId] = { biddingOrderId: orderId };
  saveUserStates(userStates);
  
  const order = orders[orderId];
  await sendTelegramMessage(chatId, `üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>

<b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150000):`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
async function handleBidStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  if (isNaN(parseInt(text)) || parseInt(text) <= 0) {
    await sendTelegramMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —á–∏—Å–ª–æ–º.');
    return NextResponse.json({ success: true });
  }
  
  const price = parseInt(text);
  
  const orderId = userState.biddingOrderId!;
  const orders = loadOrders();
  const drivers = loadDrivers();
  const driver = drivers[userId];
  
  if (!orders[orderId] || !driver) {
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏.');
    delete userStates[userId];
    saveUserStates(userStates);
    return NextResponse.json({ success: true });
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∫ –∑–∞–∫–∞–∑—É
  orders[orderId].bids.push({
    driverId: userId,
    driverName: driver.name,
    driverPhone: driver.phone,
    carNumber: driver.carNumber,
    price: price,
    timestamp: new Date().toISOString()
  });
  
  saveOrders(orders);
  delete userStates[userId];
  saveUserStates(userStates);
  
  await sendTelegramMessage(chatId, `‚úÖ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>

<b>–¶–µ–Ω–∞:</b> ${price.toLocaleString()} —Ç–µ–Ω–≥–µ

–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  const order = orders[orderId];
  const bidText = `üí∞ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>

<b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}
<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}
<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}
<b>–¶–µ–Ω–∞:</b> ${price.toLocaleString()} —Ç–µ–Ω–≥–µ`;

  const keyboard = {
    inline_keyboard: [
      [{ text: `‚úÖ –í—ã–±—Ä–∞—Ç—å ${driver.name}`, callback_data: `select_driver_${orderId}_${userId}` }]
    ]
  };

  await sendTelegramMessage(CHANNEL_ID, bidText, keyboard);
}

// –í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
async function selectDriver(chatId: number, orderId: string, driverId: number) {
  const orders = loadOrders();
  const drivers = loadDrivers();
  
  const order = orders[orderId];
  const driver = drivers[driverId];
  
  if (!order || !driver) {
    await sendTelegramMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫—É –≤–æ–¥–∏—Ç–µ–ª—è
  const bid = order.bids.find(b => b.driverId === driverId);
  if (!bid) {
    await sendTelegramMessage(chatId, '‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (WTID-ORDERID)
  const trackingNumber = `WT${driverId}-${orderId}`;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
  orders[orderId].status = 'assigned';
  orders[orderId].assignedDriver = driverId;
  orders[orderId].finalPrice = bid.price;
  orders[orderId].trackingNumber = trackingNumber;
  
  saveOrders(orders);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  await sendTelegramMessage(driverId, `üéâ <b>–í–∞—Å –≤—ã–±—Ä–∞–ª–∏!</b>

<b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}
<b>–¶–µ–Ω–∞:</b> ${bid.price.toLocaleString()} —Ç–µ–Ω–≥–µ
<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>${trackingNumber}</code>

–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
  for (const otherBid of order.bids) {
    if (otherBid.driverId !== driverId) {
      await sendTelegramMessage(otherBid.driverId, `üòî <b>–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç</b>

–ó–∞–∫–∞–∑ ${order.from} ‚Üí ${order.to} –≤–∑—è–ª –¥—Ä—É–≥–æ–π –≤–æ–¥–∏—Ç–µ–ª—å.
–ñ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã!`);
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
  await sendTelegramMessage(CHANNEL_ID, `‚úÖ <b>–ó–∞–∫–∞–∑ ${orderId} –∑–∞–∫—Ä—ã—Ç!</b>

<b>–í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}
<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}
<b>–¶–µ–Ω–∞:</b> ${bid.price.toLocaleString()} —Ç–µ–Ω–≥–µ
<b>–ù–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b> <code>${trackingNumber}</code>

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.`);
}

// –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
async function listDrivers(chatId: number) {
  const drivers = loadDrivers();
  const driversList = Object.values(drivers);
  
  if (driversList.length === 0) {
    await sendTelegramMessage(chatId, 'üìã –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    return NextResponse.json({ success: true });
  }
  
  let text = `üë• <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ (${driversList.length}):</b>\n\n`;
  
  driversList.forEach((driver, index) => {
    text += `${index + 1}. <b>${driver.name}</b>
üì± ${driver.phone}
üöõ ${driver.carNumber} (${driver.carType})
üÜî ${driver.id}

`;
  });
  
  await sendTelegramMessage(chatId, text);
}

// –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async function listActiveOrders(chatId: number, userId?: number) {
  const orders = loadOrders();
  const activeOrders = Object.values(orders).filter(order => order.status === 'active');
  
  if (activeOrders.length === 0) {
    await sendTelegramMessage(chatId, 'üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.');
    return NextResponse.json({ success: true });
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
  const userStates = loadUserStates();
  const userState = userId ? userStates[userId] : userStates[chatId] || {};
  
  if (userState.driverAuthed && userState.driverData) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    for (const order of activeOrders) {
      const orderText = `üì¶ <b>–ó–∞–∫–∞–∑ ${order.id}</b>

<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${order.from} ‚Üí ${order.to}
<b>–¢–∏–ø –¢–°:</b> ${order.carType}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${order.description}
<b>–°—Ç–∞–≤–æ–∫:</b> ${order.bids.length}`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É', callback_data: `bid_${order.id}` }],
          [{ text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_order' }]
        ]
      };

      await sendTelegramMessage(chatId, orderText, keyboard);
    }
  } else {
    // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
  let text = `üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (${activeOrders.length}):</b>\n\n`;
  
  activeOrders.forEach((order, index) => {
    text += `${index + 1}. <b>${order.from} ‚Üí ${order.to}</b>
üîß ${order.carType}
üìù ${order.description}
üí∞ –°—Ç–∞–≤–æ–∫: ${order.bids.length}
üÜî ${order.id}

`;
  });
  
  await sendTelegramMessage(chatId, text);
  }
}



export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram bot webhook is running',
    timestamp: new Date().toISOString()
  });
}

// ===== JSON helpers =====
function readDriversFromJson(): Array<{ id: number; name: string; phone: string; carNumber: string; carType: string }> {
  try {
    console.log('üìÅ –ß–∏—Ç–∞—é JSON —Ñ–∞–π–ª –≤–æ–¥–∏—Ç–µ–ª–µ–π:', driversFile);
    console.log('üìÅ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', fs.existsSync(driversFile));
    
    if (!fs.existsSync(driversFile)) {
      console.log('‚ùå JSON —Ñ–∞–π–ª –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return [];
    }
    
    const jsonContent = fs.readFileSync(driversFile, 'utf8');
    const drivers = JSON.parse(jsonContent);
    
    console.log('üë• –ù–∞–π–¥–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', drivers.length);
    if (drivers.length > 0) {
      console.log('üë§ –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å:', drivers[0]);
    }
    
    return drivers;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error instanceof Error ? error.message : String(error));
    return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function findDriverInJsonByPhone(phone: string): any {
  try {
    console.log(`üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`);
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
    const digitsOnly = phone.replace(/[^\d]/g, '');
    console.log(`üì± –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã: ${digitsOnly}`);
    
    // –í –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ 870 –∏ 770 - —ç—Ç–æ –æ–¥–∏–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
    let normalizedPhone = phone;
    if (digitsOnly.startsWith('870')) {
      // –ó–∞–º–µ–Ω—è–µ–º 870 –Ω–∞ 770 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      normalizedPhone = `+770${digitsOnly.slice(3)}`;
    } else if (digitsOnly.startsWith('770')) {
      // –ó–∞–º–µ–Ω—è–µ–º 770 –Ω–∞ 870 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
      normalizedPhone = `+870${digitsOnly.slice(3)}`;
    } else {
      // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º + –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      if (!phone.startsWith('+')) {
        normalizedPhone = `+${digitsOnly}`;
      }
    }
    
    console.log(`üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω: ${normalizedPhone}`);
    
    // –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    const driver = readDriversFromJson().find(d => d.phone === normalizedPhone);
    if (driver) {
      console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${driver.name}`);
      return driver;
    }
    
    // –ò—â–µ–º –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–æ–º–µ—Ä–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const driverByVariants = readDriversFromJson().find(d => {
      if (d.phoneVariants && Array.isArray(d.phoneVariants)) {
        return d.phoneVariants.includes(normalizedPhone);
      }
      return false;
    });
    
    if (driverByVariants) {
      console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º: ${driverByVariants.name}`);
      return driverByVariants;
    }
    
    // –ò—â–µ–º –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ü–∏—Ñ—Ä
    const driverByDigits = readDriversFromJson().find(d => {
      const driverDigits = d.phone.replace(/[^\d]/g, '');
      return driverDigits === digitsOnly;
    });
    
    if (driverByDigits) {
      console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ —Ü–∏—Ñ—Ä–∞–º: ${driverByDigits.name}`);
      return driverByDigits;
    }
    
    // –ò—â–µ–º –ø–æ –Ω–æ–º–µ—Ä—É —Å –∑–∞–º–µ–Ω–æ–π 870/770
    if (digitsOnly.startsWith('870')) {
      const searchPhone = `+770${digitsOnly.slice(3)}`;
      const driverBy870 = readDriversFromJson().find(d => d.phone === searchPhone);
      if (driverBy870) {
        console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ 870‚Üí770: ${driverBy870.name}`);
        return driverBy870;
      }
    } else if (digitsOnly.startsWith('770')) {
      const searchPhone = `+870${digitsOnly.slice(3)}`;
      const driverBy770 = readDriversFromJson().find(d => d.phone === searchPhone);
      if (driverBy770) {
        console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω –ø–æ 770‚Üí870: ${driverBy770.name}`);
        return driverBy770;
      }
    }
    
    console.log('‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    return null;
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return null;
  }
}

function appendDriverToJson(entry: { name: string; phone: string; carNumber: string; carType: string }) {
  try {
    const drivers = readDriversFromJson();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    const newDriver = {
      id: drivers.length + 1,
      name: entry.name,
      phone: entry.phone,
      carNumber: entry.carNumber,
      carType: entry.carType
    };
    
    drivers.push(newDriver);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ JSON
    fs.writeFileSync(driversFile, JSON.stringify(drivers, null, 2), 'utf8');
    console.log('‚úÖ –ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ JSON:', newDriver.name);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è –≤ JSON:', error);
  }
}

// ===== –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ =====
function getAllDrivers(): Array<{ id: number; name: string; phone: string; carNumber: string; carType: string }> {
  return readDriversFromJson();
}

function deleteDriverById(driverId: number): boolean {
  try {
    const drivers = readDriversFromJson();
    const initialCount = drivers.length;
    
    const filteredDrivers = drivers.filter(driver => driver.id !== driverId);
    
    if (filteredDrivers.length === initialCount) {
      console.log(`‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    }
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º ID –¥–ª—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –≤–æ–¥–∏—Ç–µ–ª–µ–π
    const updatedDrivers = filteredDrivers.map((driver, index) => ({
      ...driver,
      id: index + 1
    }));
    
    fs.writeFileSync(driversFile, JSON.stringify(updatedDrivers, null, 2), 'utf8');
    console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} —É–¥–∞–ª–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${updatedDrivers.length}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return false;
  }
}

function updateDriverById(driverId: number, updates: Partial<{ name: string; phone: string; carNumber: string; carType: string }>): boolean {
  try {
    const drivers = readDriversFromJson();
    const driverIndex = drivers.findIndex(driver => driver.id === driverId);
    
    if (driverIndex === -1) {
      console.log(`‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return false;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è
    drivers[driverIndex] = {
      ...drivers[driverIndex],
      ...updates
    };
    
    fs.writeFileSync(driversFile, JSON.stringify(drivers, null, 2), 'utf8');
    console.log(`‚úÖ –í–æ–¥–∏—Ç–µ–ª—å —Å ID ${driverId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return false;
  }
}

function getDriverById(driverId: number): { id: number; name: string; phone: string; carNumber: string; carType: string } | null {
  const drivers = readDriversFromJson();
  return drivers.find(driver => driver.id === driverId) || null;
}

// ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è–º–∏ =====
async function sendDriversManagementMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'admin_list_drivers' }],
      [{ text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è', callback_data: 'admin_add_driver' }],
      [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è', callback_data: 'admin_edit_driver' }],
      [{ text: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è', callback_data: 'admin_delete_driver' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'admin_drivers_stats' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω–∫–µ', callback_data: 'back_to_admin' }]
    ]
  };
  
  await sendTelegramMessage(chatId, 'üöõ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboard);
}

async function sendDriversList(chatId: number) {
  const drivers = getAllDrivers();
  
  if (drivers.length === 0) {
    await sendTelegramMessage(chatId, 'üìã <b>–°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
    return NextResponse.json({ success: true });
  }
  
  let message = `üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n–í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${drivers.length}\n\n`;
  
  drivers.forEach((driver, index) => {
    message += `${index + 1}. <b>${driver.name}</b>\n`;
    message += `   üì± ${driver.phone}\n`;
    message += `   üöó ${driver.carNumber}\n`;
    message += `   üöõ ${driver.carType}\n`;
    message += `   üÜî ID: ${driver.id}\n\n`;
  });
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_drivers' }]
    ]
  };
  
  await sendTelegramMessage(chatId, message, keyboard);
}

async function sendAddDriverForm(chatId: number) {
  const keyboard = {
    keyboard: [
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
  
  await sendTelegramMessage(chatId, '‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –≤–æ–¥–∏—Ç–µ–ª—è:', keyboard);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
  const userId = chatId.toString();
  const userStates = loadUserStates();
  if (!userStates[userId]) userStates[userId] = {};
  userStates[userId].adminStep = 'add_driver_name';
  saveUserStates(userStates);
}

async function sendEditDriverForm(chatId: number) {
  const drivers = getAllDrivers();
  
  if (drivers.length === 0) {
    await sendTelegramMessage(chatId, '‚ùå –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
    return NextResponse.json({ success: true });
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  const keyboard = {
    inline_keyboard: [
      ...drivers.map(driver => [{
        text: `${driver.name} (${driver.phone})`,
        callback_data: `admin_edit_driver_${driver.id}`
      }]),
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_drivers' }]
    ]
  };
  
  await sendTelegramMessage(chatId, '‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', keyboard);
}

async function sendDeleteDriverForm(chatId: number) {
  const drivers = getAllDrivers();
  
  if (drivers.length === 0) {
    await sendTelegramMessage(chatId, '‚ùå –ù–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
    return NextResponse.json({ success: true });
  }
  
  // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  const keyboard = {
    inline_keyboard: [
      ...drivers.map(driver => [{
        text: `üóëÔ∏è ${driver.name} (${driver.phone})`,
        callback_data: `admin_delete_driver_${driver.id}`
      }]),
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_drivers' }]
    ]
  };
  
  await sendTelegramMessage(chatId, 'üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:', keyboard);
}

async function sendDriversStats(chatId: number) {
  const drivers = getAllDrivers();
  
  if (drivers.length === 0) {
    await sendTelegramMessage(chatId, 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n–í –±–∞–∑–µ –Ω–µ—Ç –≤–æ–¥–∏—Ç–µ–ª–µ–π.');
    return NextResponse.json({ success: true });
  }
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –¢–°
  const carTypeStats: { [key: string]: number } = {};
  drivers.forEach(driver => {
    carTypeStats[driver.carType] = (carTypeStats[driver.carType] || 0) + 1;
  });
  
  let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n`;
  message += `üë• –í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${drivers.length}\n\n`;
  message += `<b>–ü–æ —Ç–∏–ø–∞–º –¢–°:</b>\n`;
  
  Object.entries(carTypeStats).forEach(([carType, count]) => {
    message += `üöõ ${carType}: ${count}\n`;
  });
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é', callback_data: 'admin_manage_drivers' }]
    ]
  };
  
  await sendTelegramMessage(chatId, message, keyboard);
}

// ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π =====
async function startEditDriver(chatId: number, driverId: number) {
  const driver = getDriverById(driverId);
  if (!driver) {
    await sendTelegramMessage(chatId, '‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }
  
  const keyboard = {
    keyboard: [
      ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é']
    ],
    resize_keyboard: true,
    one_time_keyboard: false
  };
  
  let message = `‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n<b>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</b>\n`;
  message += `üë§ –ò–º—è: ${driver.name}\n`;
  message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone}\n`;
  message += `üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: ${driver.carNumber}\n`;
  message += `üöõ –¢–∏–ø –¢–°: ${driver.carType}\n\n`;
  message += `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`;
  message += `<code>–ò–º—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ù–æ–º–µ—Ä –∞–≤—Ç–æ;–¢–∏–ø –¢–°</code>\n\n`;
  message += `–ù–∞–ø—Ä–∏–º–µ—Ä:\n`;
  message += `<code>–ù—É—Ä–±–µ–∫;+77054060674;–ê123–ë–í01;–§—É—Ä–∞ 20—Ç</code>`;
  
  await sendTelegramMessage(chatId, message, keyboard);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const userId = chatId.toString();
  if (!userStates[userId]) userStates[userId] = {};
  userStates[userId].adminStep = 'edit_driver';
  userStates[userId].editingDriverId = driverId;
  saveUserStates(userStates);
}

async function confirmDeleteDriver(chatId: number, driverId: number) {
  const driver = getDriverById(driverId);
  if (!driver) {
    await sendTelegramMessage(chatId, '‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }
  
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `confirm_delete_driver_${driverId}` }],
      [{ text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: 'admin_manage_drivers' }]
    ]
  };
  
  let message = `üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n`;
  message += `–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤–æ–¥–∏—Ç–µ–ª—è?\n\n`;
  message += `üë§ –ò–º—è: ${driver.name}\n`;
  message += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone}\n`;
  message += `üöó –ù–æ–º–µ—Ä –∞–≤—Ç–æ: ${driver.carNumber}\n`;
  message += `üöõ –¢–∏–ø –¢–°: ${driver.carType}\n\n`;
  message += `‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>`;
  
  await sendTelegramMessage(chatId, message, keyboard);
}

async function sendAdminMenu(chatId: number) {
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'create_order' }],
      [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'list_orders' }],
      [{ text: 'üë• –í–æ–¥–∏—Ç–µ–ª–∏', callback_data: 'list_drivers' }],
      [{ text: 'üöõ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏', callback_data: 'admin_manage_drivers' }],
      [{ text: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'show_analytics' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendTelegramMessage(chatId, '‚úÖ –ü–∞–Ω–µ–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', keyboard);
}

// ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–¥–º–∏–Ω–∫–∏ =====
async function handleAdminStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  if (userState.adminStep === 'add_driver_name') {
    userState.adminStep = 'add_driver_phone';
    userState.tempDriverName = text;
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–æ–¥–∏—Ç–µ–ª—è:');
  } else if (userState.adminStep === 'add_driver_phone') {
    userState.adminStep = 'add_driver_car_number';
    userState.tempDriverPhone = text;
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:');
  } else if (userState.adminStep === 'add_driver_car_number') {
    userState.adminStep = 'add_driver_car_type';
    userState.tempDriverCarNumber = text;
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è:');
  } else if (userState.adminStep === 'add_driver_car_type') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    const newDriver = {
      name: userState.tempDriverName!,
      phone: userState.tempDriverPhone!,
      carNumber: userState.tempDriverCarNumber!,
      carType: text
    };
    
    appendDriverToJson(newDriver);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    delete userState.adminStep;
    delete userState.tempDriverName;
    delete userState.tempDriverPhone;
    delete userState.tempDriverCarNumber;
    userStates[userId] = userState;
    saveUserStates(userStates);
    
    await sendTelegramMessage(chatId, `‚úÖ –í–æ–¥–∏—Ç–µ–ª—å ${newDriver.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    await sendDriversManagementMenu(chatId);
  } else if (userState.adminStep === 'edit_driver') {
    // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–ò–º—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ù–æ–º–µ—Ä –∞–≤—Ç–æ;–¢–∏–ø –¢–°"
    const parts = text.split(';');
    if (parts.length === 4) {
      const [name, phone, carNumber, carType] = parts.map(p => p.trim());
      const driverId = userState.editingDriverId!;
      
      const success = updateDriverById(driverId, { name, phone, carNumber, carType });
      
      if (success) {
        await sendTelegramMessage(chatId, `‚úÖ –í–æ–¥–∏—Ç–µ–ª—å ${name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!`);
      } else {
        await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è.');
      }
      
      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      delete userState.adminStep;
      delete userState.editingDriverId;
      userStates[userId] = userState;
      saveUserStates(userStates);
      
      await sendDriversManagementMenu(chatId);
    } else {
      await sendTelegramMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ò–º—è;–¢–µ–ª–µ—Ñ–æ–Ω;–ù–æ–º–µ—Ä –∞–≤—Ç–æ;–¢–∏–ø –¢–°');
    }
  }
}

// ===== Helper —Ñ—É–Ω–∫—Ü–∏–∏ =====
function getStatusText(status: string): string {
  switch (status) {
    case 'created': return '–°–æ–∑–¥–∞–Ω';
    case 'assigned': return '–ù–∞–∑–Ω–∞—á–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—é';
    case 'in_transit': return '–í –ø—É—Ç–∏';
    case 'warehouse': return '–ù–∞ —Å–∫–ª–∞–¥–µ';
    case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
    case 'delayed': return '–ó–∞–¥–µ—Ä–∂–∫–∞';
    case 'cancelled': return '–û—Ç–º–µ–Ω–µ–Ω';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

// ===== –§—É–Ω–∫—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ =====
interface NotificationSubscriber {
  id: string;
  chatId: number;
  lastNotification: Date;
  filters: {
    driverId?: number;
    orderUpdates?: boolean;
    newOrders?: boolean;
    systemAlerts?: boolean;
  };
}

let notificationSubscribers: NotificationSubscriber[] = [];
let notificationHistory: Array<{
  id: string;
  type: string;
  message: string;
  timestamp: Date;
  data?: any;
}> = [];

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function subscribeToNotifications(chatId: number, driverId?: number): string {
  const subscriberId = `sub_${chatId}_${Date.now()}`;

  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
  notificationSubscribers = notificationSubscribers.filter(sub => sub.chatId !== chatId);

  const subscriber: NotificationSubscriber = {
    id: subscriberId,
    chatId,
    lastNotification: new Date(),
    filters: {
      driverId,
      orderUpdates: true,
      newOrders: true,
      systemAlerts: true
    }
  };

  notificationSubscribers.push(subscriber);
  return subscriberId;
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function unsubscribeFromNotifications(chatId: number): void {
  notificationSubscribers = notificationSubscribers.filter(sub => sub.chatId !== chatId);
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
async function broadcastNotification(type: string, message: string, data?: any, targetDriverId?: number): Promise<void> {
  const notificationId = `notif_${Date.now()}`;
  const notification = {
    id: notificationId,
    type,
    message,
    timestamp: new Date(),
    data
  };

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
  notificationHistory.push(notification);

  // –û–≥—Ä–∞–Ω–∏—á–∏–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  if (notificationHistory.length > 100) {
    notificationHistory = notificationHistory.slice(-100);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
  for (const subscriber of notificationSubscribers) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    if (targetDriverId && subscriber.filters.driverId && subscriber.filters.driverId !== targetDriverId) {
      continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    }

    if (type === 'new_order' && !subscriber.filters.newOrders) continue;
    if (type === 'order_update' && !subscriber.filters.orderUpdates) continue;
    if (type === 'system' && !subscriber.filters.systemAlerts) continue;

    try {
      let notificationText = '';

      switch (type) {
        case 'new_order':
          notificationText = `üö® <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n${message}`;
          break;
        case 'order_update':
          notificationText = `üìç <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n${message}`;
          break;
        case 'system':
          notificationText = `‚ÑπÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n${message}`;
          break;
        default:
          notificationText = message;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram
      await sendTelegramMessage(subscriber.chatId, notificationText);

      // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      subscriber.lastNotification = new Date();
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫—É ${subscriber.id}:`, error);
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
async function showNotificationSettings(chatId: number, driverId?: number): Promise<void> {
  const existingSubscriber = notificationSubscribers.find(sub => sub.chatId === chatId);

  let message = `üîî <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n`;

  if (existingSubscriber) {
    message += `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>–≤–∫–ª—é—á–µ–Ω—ã</b>\n\n`;
    message += `<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n`;
    message += `üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã: ${existingSubscriber.filters.newOrders ? '‚úÖ' : '‚ùå'}\n`;
    message += `üìç –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: ${existingSubscriber.filters.orderUpdates ? '‚úÖ' : '‚ùå'}\n`;
    message += `‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è: ${existingSubscriber.filters.systemAlerts ? '‚úÖ' : '‚ùå'}\n`;
  } else {
    message += `‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>–æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n`;
    message += `–í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å:\n`;
    message += `‚Ä¢ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n`;
    message += `‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–æ–≤\n`;
    message += `‚Ä¢ –°–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è\n`;
  }

  const keyboard = {
    inline_keyboard: [
      existingSubscriber
        ? [
            { text: 'üîï –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'disable_notifications' },
            { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã', callback_data: 'configure_filters' }
          ]
        : [
            { text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'enable_notifications' }
          ],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendTelegramMessage(chatId, message, keyboard);
}

// ===== –§—É–Ω–∫—Ü–∏–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ =====
function getAnalyticsData() {
  const orders = loadOrders();
  const drivers = loadDrivers();

  const allOrders = Object.values(orders);
  const allDrivers = Object.values(drivers).filter(d => d.status === 'active');

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤
  const totalOrders = allOrders.length;
  const activeOrders = allOrders.filter(o => o.status === 'active').length;
  const completedOrders = allOrders.filter(o => o.status === 'delivered').length;
  const inTransitOrders = allOrders.filter(o => ['assigned', 'in_transit'].includes(o.status)).length;

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π
  const totalDrivers = allDrivers.length;
  const driversWithOrders = allDrivers.filter(d => d.totalOrders > 0).length;
  const avgRating = allDrivers.length > 0
    ? allDrivers.reduce((sum, d) => sum + d.clientRating, 0) / allDrivers.length
    : 0;

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  const routes = allOrders.reduce((acc, order) => {
    const route = `${order.from} ‚Üí ${order.to}`;
    acc[route] = (acc[route] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const topRoutes = Object.entries(routes)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 5);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¢–°
  const carTypes = allDrivers.reduce((acc, driver) => {
    acc[driver.carType] = (acc[driver.carType] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  // –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const totalRevenue = allOrders
    .filter(o => o.status === 'delivered')
    .reduce((sum, o) => sum + (o.finalPrice || 0), 0);

  const avgOrderValue = completedOrders > 0 ? totalRevenue / completedOrders : 0;

  return {
    orders: {
      total: totalOrders,
      active: activeOrders,
      completed: completedOrders,
      inTransit: inTransitOrders,
      completionRate: totalOrders > 0 ? (completedOrders / totalOrders * 100).toFixed(1) : 0
    },
    drivers: {
      total: totalDrivers,
      active: driversWithOrders,
      avgRating: avgRating.toFixed(1),
      utilizationRate: totalDrivers > 0 ? (driversWithOrders / totalDrivers * 100).toFixed(1) : 0
    },
    routes: topRoutes,
    carTypes: Object.entries(carTypes).sort(([,a], [,b]) => b - a),
    finance: {
      totalRevenue: totalRevenue.toLocaleString(),
      avgOrderValue: avgOrderValue.toFixed(0),
      currency: '—Ç–µ–Ω–≥–µ'
    },
    period: {
      start: allOrders.length > 0 ? new Date(Math.min(...allOrders.map(o => new Date(o.createdAt).getTime()))).toLocaleDateString('ru-RU') : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
      end: new Date().toLocaleDateString('ru-RU')
    }
  };
}

async function showAnalytics(chatId: number) {
  const analytics = getAnalyticsData();

  let message = `üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ Velta Trans</b>\n\n`;

  // –ó–∞–∫–∞–∑—ã
  message += `<b>üì¶ –ó–∞–∫–∞–∑—ã:</b>\n`;
  message += `–í—Å–µ–≥–æ: ${analytics.orders.total}\n`;
  message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${analytics.orders.active}\n`;
  message += `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${analytics.orders.completed}\n`;
  message += `–í –ø—É—Ç–∏: ${analytics.orders.inTransit}\n`;
  message += `–£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${analytics.orders.completionRate}%\n\n`;

  // –í–æ–¥–∏—Ç–µ–ª–∏
  message += `<b>üöõ –í–æ–¥–∏—Ç–µ–ª–∏:</b>\n`;
  message += `–í—Å–µ–≥–æ: ${analytics.drivers.total}\n`;
  message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${analytics.drivers.active}\n`;
  message += `–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ‚≠ê ${analytics.drivers.avgRating}\n`;
  message += `–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: ${analytics.drivers.utilizationRate}%\n\n`;

  // –§–∏–Ω–∞–Ω—Å—ã
  message += `<b>üí∞ –§–∏–Ω–∞–Ω—Å—ã:</b>\n`;
  message += `–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${analytics.finance.totalRevenue} ${analytics.finance.currency}\n`;
  message += `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${analytics.finance.avgOrderValue} ${analytics.finance.currency}\n\n`;

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  message += `<b>üó∫Ô∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n`;
  analytics.routes.slice(0, 3).forEach(([route, count], index) => {
    message += `${index + 1}. ${route}: ${count} –∑–∞–∫–∞–∑–æ–≤\n`;
  });
  message += '\n';

  // –¢–∏–ø—ã –¢–°
  message += `<b>üöõ –¢–∏–ø—ã –¢–°:</b>\n`;
  analytics.carTypes.slice(0, 3).forEach(([carType, count], index) => {
    message += `${index + 1}. ${carType}: ${count} –≤–æ–¥–∏—Ç–µ–ª–µ–π\n`;
  });

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'detailed_analytics' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'drivers_analytics' }],
      [{ text: 'üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', callback_data: 'finance_analytics' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendTelegramMessage(chatId, message, keyboard);
}

async function showDetailedAnalytics(chatId: number) {
  const analytics = getAnalyticsData();

  let message = `üìà <b>–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n`;

  message += `<b>üìÖ –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞:</b>\n`;
  message += `—Å ${analytics.period.start} –ø–æ ${analytics.period.end}\n\n`;

  message += `<b>üì¶ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤:</b>\n`;
  message += `‚Ä¢ –°–æ–∑–¥–∞–Ω–æ: ${analytics.orders.total}\n`;
  message += `‚Ä¢ –í —Ä–∞–±–æ—Ç–µ: ${analytics.orders.active + analytics.orders.inTransit}\n`;
  message += `‚Ä¢ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${analytics.orders.completed}\n`;
  message += `‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è: ${analytics.orders.completionRate}%\n\n`;

  message += `<b>üöõ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n`;
  message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${analytics.drivers.total}\n`;
  message += `‚Ä¢ –í—ã–ø–æ–ª–Ω—è—é—Ç –∑–∞–∫–∞–∑—ã: ${analytics.drivers.active}\n`;
  message += `‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: ${analytics.drivers.utilizationRate}%\n`;
  message += `‚Ä¢ –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ‚≠ê ${analytics.drivers.avgRating}\n\n`;

  message += `<b>üó∫Ô∏è –í—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã:</b>\n`;
  analytics.routes.forEach(([route, count]) => {
    message += `‚Ä¢ ${route}: ${count}\n`;
  });

  const keyboard = {
    inline_keyboard: [
      [{ text: '‚¨ÖÔ∏è –ö –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'show_analytics' }]
    ]
  };

  await sendTelegramMessage(chatId, message, keyboard);
}

async function showDriversAnalytics(chatId: number) {
  const drivers = loadDrivers();
  const activeDrivers = Object.values(drivers).filter(d => d.status === 'active');

  if (activeDrivers.length === 0) {
    await sendTelegramMessage(chatId, 'üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.');
    return NextResponse.json({ success: true });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
  activeDrivers.sort((a, b) => b.completedOrders - a.completedOrders);

  let message = `üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n`;
  message += `–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${activeDrivers.length}\n\n`;

  message += `<b>üèÜ –¢–æ–ø –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–∫–∞–∑–∞–º:</b>\n`;
  activeDrivers.slice(0, 5).forEach((driver, index) => {
    const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üìç';
    message += `${medal} ${driver.name}\n`;
    message += `   ‚úÖ ${driver.completedOrders} –∑–∞–∫–∞–∑–æ–≤\n`;
    message += `   ‚≠ê ${driver.clientRating.toFixed(1)} (${driver.clientRatingCount} –æ—Ü–µ–Ω–æ–∫)\n`;
    message += `   üöõ ${driver.carType}\n\n`;
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –¢–°
  const carTypeStats = activeDrivers.reduce((acc, driver) => {
    acc[driver.carType] = (acc[driver.carType] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  message += `<b>üöõ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –¢–°:</b>\n`;
  Object.entries(carTypeStats).forEach(([carType, count]) => {
    message += `‚Ä¢ ${carType}: ${count} –≤–æ–¥–∏—Ç–µ–ª–µ–π\n`;
  });

  const keyboard = {
    inline_keyboard: [
      [{ text: '‚¨ÖÔ∏è –ö –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'show_analytics' }]
    ]
  };

  await sendTelegramMessage(chatId, message, keyboard);
}

async function showFinanceAnalytics(chatId: number) {
  const analytics = getAnalyticsData();
  const orders = loadOrders();
  const completedOrders = Object.values(orders).filter(o => o.status === 'delivered');

  let message = `üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞</b>\n\n`;

  message += `<b>üíµ –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n`;
  message += `–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${analytics.finance.totalRevenue} ${analytics.finance.currency}\n`;
  message += `–°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${analytics.finance.avgOrderValue} ${analytics.finance.currency}\n`;
  message += `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${completedOrders.length}\n\n`;

  if (completedOrders.length > 0) {
    // –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º —Ü–µ–Ω
    const priceRanges = {
      '–¥–æ 50–∫': completedOrders.filter(o => o.finalPrice < 50000).length,
      '50–∫-100–∫': completedOrders.filter(o => o.finalPrice >= 50000 && o.finalPrice < 100000).length,
      '100–∫-200–∫': completedOrders.filter(o => o.finalPrice >= 100000 && o.finalPrice < 200000).length,
      '200–∫-500–∫': completedOrders.filter(o => o.finalPrice >= 200000 && o.finalPrice < 500000).length,
      '500–∫+': completedOrders.filter(o => o.finalPrice >= 500000).length
    };

    message += `<b>üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—É–º–º–∞–º:</b>\n`;
    Object.entries(priceRanges).forEach(([range, count]) => {
      if (count > 0) {
        const percentage = ((count / completedOrders.length) * 100).toFixed(1);
        message += `‚Ä¢ ${range}: ${count} –∑–∞–∫–∞–∑–æ–≤ (${percentage}%)\n`;
      }
    });
  }

  const keyboard = {
    inline_keyboard: [
      [{ text: '‚¨ÖÔ∏è –ö –æ–±—â–µ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ', callback_data: 'show_analytics' }]
    ]
  };

  await sendTelegramMessage(chatId, message, keyboard);
}

function getStatusIcon(status: string): string {
  switch (status) {
    case 'created': return 'üìù';
    case 'assigned': return 'üë§';
    case 'in_transit': return 'üöõ';
    case 'warehouse': return 'üè≠';
    case 'delivered': return '‚úÖ';
    case 'delayed': return '‚ö†Ô∏è';
    case 'cancelled': return '‚ùå';
    default: return '‚ùì';
  }
}

// ===== –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ =====
async function showDriverRating(chatId: number, driverId: number) {
  const drivers = loadDrivers();
  const driver = drivers[driverId];

  if (!driver) {
    await sendTelegramMessage(chatId, '‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }

  let message = `‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n`;
  message += `üë§ <b>${driver.name}</b>\n`;
  message += `üì± ${driver.phone}\n`;
  message += `üöõ ${driver.carNumber} (${driver.carType})\n\n`;

  message += `<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n`;
  message += `‚≠ê –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${driver.clientRating > 0 ? driver.clientRating.toFixed(1) : '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}\n`;
  message += `üìà –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${driver.totalOrders}\n`;
  message += `‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${driver.completedOrders}\n`;
  message += `üìù –û—Ü–µ–Ω–æ–∫: ${driver.clientRatingCount}\n\n`;

  const successRate = driver.totalOrders > 0 ? ((driver.completedOrders / driver.totalOrders) * 100).toFixed(1) : 0;
  message += `üéØ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%\n\n`;

  message += `<b>üèÜ –£—Ä–æ–≤–µ–Ω—å:</b>\n`;
  if (driver.clientRating >= 4.5) message += 'üëë –ú–∞—Å—Ç–µ—Ä';
  else if (driver.clientRating >= 4.0) message += 'ü•á –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª';
  else if (driver.clientRating >= 3.5) message += 'ü•à –û–ø—ã—Ç–Ω—ã–π';
  else if (driver.clientRating >= 3.0) message += 'ü•â –ù–∞–¥–µ–∂–Ω—ã–π';
  else if (driver.clientRating > 0) message += 'üî∞ –ù–∞—á–∏–Ω–∞—é—â–∏–π';
  else message += 'üìà –ë–µ–∑ —Ä–µ–π—Ç–∏–Ω–≥–∞';

  await sendTelegramMessage(chatId, message);
}

async function showTopDrivers(chatId: number, limit: number = 10) {
  const drivers = loadDrivers();
  const activeDrivers = Object.values(drivers).filter(d => d.status === 'active' && d.clientRating > 0);

  if (activeDrivers.length === 0) {
    await sendTelegramMessage(chatId, 'üìã <b>–¢–æ–ø –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n–í–æ–¥–∏—Ç–µ–ª–∏ –µ—â–µ –Ω–µ –∏–º–µ—é—Ç –æ—Ü–µ–Ω–æ–∫.');
    return NextResponse.json({ success: true });
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–∞–∫–∞–∑–æ–≤
  activeDrivers.sort((a, b) => {
    if (a.clientRating !== b.clientRating) {
      return b.clientRating - a.clientRating;
    }
    return b.completedOrders - a.completedOrders;
  });

  let message = `üèÜ <b>–¢–æ–ø ${Math.min(limit, activeDrivers.length)} –≤–æ–¥–∏—Ç–µ–ª–µ–π</b>\n\n`;

  activeDrivers.slice(0, limit).forEach((driver, index) => {
    const medal = index === 0 ? 'ÔøΩÔøΩ' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : 'üìç';
    message += `${medal} <b>${driver.name}</b>\n`;
    message += `   ‚≠ê ${driver.clientRating.toFixed(1)} (${driver.clientRatingCount} –æ—Ü–µ–Ω–æ–∫)\n`;
    message += `   ‚úÖ ${driver.completedOrders} –∑–∞–∫–∞–∑–æ–≤\n`;
    message += `   üöõ ${driver.carType}\n\n`;
  });

  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'driver_stats' }],
      [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };

  await sendTelegramMessage(chatId, message, keyboard);
}

async function requestOrderRating(chatId: number, orderId: string, isDriverRating: boolean = false) {
  const orders = loadOrders();
  const order = orders[orderId];

  if (!order) {
    await sendTelegramMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }

  const userStates = loadUserStates();
  const userId = chatId.toString();

  if (isDriverRating) {
    // –í–æ–¥–∏—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞
    if (!userStates[userId] || !userStates[userId].driverAuthed) {
      await sendTelegramMessage(chatId, '‚ùå –¢–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ü–µ–Ω–∏–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤.');
      return NextResponse.json({ success: true });
    }

    userStates[userId] = {
      ...userStates[userId],
      ratingOrderId: orderId,
      ratingType: 'client_rating'
    };
    saveUserStates(userStates);

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'rate_5' },
          { text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'rate_4' }
        ],
        [
          { text: '‚≠ê‚≠ê‚≠ê', callback_data: 'rate_3' },
          { text: '‚≠ê‚≠ê', callback_data: 'rate_2' },
          { text: '‚≠ê', callback_data: 'rate_1' }
        ],
        [{ text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_rating' }]
      ]
    };

    await sendTelegramMessage(chatId,
      `‚≠ê <b>–û—Ü–µ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞</b>\n\n` +
      `–ó–∞–∫–∞–∑: <code>${order.trackingNumber}</code>\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${order.from} ‚Üí ${order.to}\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º:`,
      keyboard
    );
  } else {
    // –ö–ª–∏–µ–Ω—Ç –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è
    userStates[userId] = {
      ...userStates[userId],
      ratingOrderId: orderId,
      ratingType: 'driver_rating'
    };
    saveUserStates(userStates);

    const keyboard = {
      inline_keyboard: [
        [
          { text: '‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'rate_5' },
          { text: '‚≠ê‚≠ê‚≠ê‚≠ê', callback_data: 'rate_4' }
        ],
        [
          { text: '‚≠ê‚≠ê‚≠ê', callback_data: 'rate_3' },
          { text: '‚≠ê‚≠ê', callback_data: 'rate_2' },
          { text: '‚≠ê', callback_data: 'rate_1' }
        ],
        [{ text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip_rating' }]
      ]
    };

    await sendTelegramMessage(chatId,
      `‚≠ê <b>–û—Ü–µ–Ω–∏—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n` +
      `–ó–∞–∫–∞–∑: <code>${order.trackingNumber}</code>\n` +
      `–ú–∞—Ä—à—Ä—É—Ç: ${order.from} ‚Üí ${order.to}\n\n` +
      `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –≤–æ–¥–∏—Ç–µ–ª—è:`,
      keyboard
    );
  }
}

async function processRating(chatId: number, rating: number, userStates: Record<string, UserState>) {
  const userId = chatId.toString();
  const userState = userStates[userId];

  if (!userState || !userState.ratingOrderId) {
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }

  const orderId = userState.ratingOrderId;
  const ratingType = userState.ratingType;

  const orders = loadOrders();
  const order = orders[orderId];

  if (!order) {
    await sendTelegramMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return NextResponse.json({ success: true });
  }

  if (ratingType === 'driver_rating') {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª—è
    order.driverRating = rating;

    const drivers = loadDrivers();
    if (order.assignedDriver && drivers[order.assignedDriver]) {
      const driver = drivers[order.assignedDriver];

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–æ–¥–∏—Ç–µ–ª—è
      driver.totalOrders += 1;
      if (order.status === 'delivered') {
        driver.completedOrders += 1;
      }

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
      const oldRatingSum = driver.clientRating * driver.clientRatingCount;
      driver.clientRatingCount += 1;
      driver.clientRating = (oldRatingSum + rating) / driver.clientRatingCount;

      saveDrivers(drivers);
    }

    await sendTelegramMessage(chatId, `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—é ${'‚≠ê'.repeat(rating)} (${rating}/5)`);
  } else if (ratingType === 'client_rating') {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –∫–ª–∏–µ–Ω—Ç–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∑–∞–∫–∞–∑–µ)
    order.clientRating = rating;
    await sendTelegramMessage(chatId, `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!\n\n–í—ã –æ—Ü–µ–Ω–∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ ${'‚≠ê'.repeat(rating)} (${rating}/5)`);
  }

  saveOrders(orders);

  // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  delete userState.ratingOrderId;
  delete userState.ratingType;
  userStates[userId] = userState;
  saveUserStates(userStates);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è
async function showDriverActiveOrders(chatId: number, driverId: number) {
  try {
    const orders = loadOrders();
    const driverOrders = Object.values(orders).filter(order =>
      order.assignedDriver === driverId &&
      ['assigned', 'in_transit', 'warehouse', 'delayed'].includes(order.status)
    );

    if (driverOrders.length === 0) {
      await sendTelegramMessage(chatId, 'üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.');
      return NextResponse.json({ success: true });
    }

    let message = `üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å ${driverOrders.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n`;
    
    driverOrders.forEach((order, index) => {
      const statusText = getStatusText(order.status);
      const statusIcon = getStatusIcon(order.status);
      
      message += `${index + 1}. <b>${order.trackingNumber}</b>\n`;
      message += `   üìç ${order.route.from} ‚Üí ${order.route.to}\n`;
      message += `   üì¶ ${order.description}\n`;
      message += `   ‚öñÔ∏è ${order.weight} –∫–≥, ${order.volume} –º¬≥\n`;
      message += `   üí∞ ${order.price} ${order.currency}\n`;
      message += `   ${statusIcon} ${statusText}\n`;
      message += `   üìÖ –°—Ä–æ–∫: ${new Date(order.deadline).toLocaleDateString('ru-RU')}\n\n`;
    });

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'update_order_status' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
      ]
    };

    await sendTelegramMessage(chatId, message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–æ–¥–∏—Ç–µ–ª—è
async function showDriverClosedOrders(chatId: number, driverId: number) {
  try {
    const orders = loadOrders();
    const driverOrders = Object.values(orders).filter(order =>
      order.assignedDriver === driverId &&
      ['delivered', 'cancelled'].includes(order.status)
    );

    if (driverOrders.length === 0) {
      await sendTelegramMessage(chatId, 'üìö <b>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.');
      return NextResponse.json({ success: true });
    }

    let message = `üìö <b>–ó–∞–∫—Ä—ã—Ç—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–£ –≤–∞—Å ${driverOrders.length} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n`;
    
    driverOrders.forEach((order, index) => {
      const statusText = getStatusText(order.status);
      const statusIcon = getStatusIcon(order.status);
      const completionDate = order.routePoints && order.routePoints.length > 0 
        ? new Date(order.routePoints[order.routePoints.length - 1].timestamp).toLocaleDateString('ru-RU')
        : '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      
      message += `${index + 1}. <b>${order.trackingNumber}</b>\n`;
      message += `   üìç ${order.route.from} ‚Üí ${order.route.to}\n`;
      message += `   üì¶ ${order.description}\n`;
      message += `   üí∞ ${order.price} ${order.currency}\n`;
      message += `   ${statusIcon} ${statusText}\n`;
      message += `   ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω: ${completionDate}\n\n`;
    });

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'view_active_orders' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
      ]
    };

    await sendTelegramMessage(chatId, message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∑–∞–∫—Ä—ã—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–¥–ª—è –≤—Å–µ—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π)
async function showAvailableOrders(chatId: number) {
  try {
    const orders = loadOrders();
    const availableOrders = Object.values(orders).filter(order =>
      order.status === 'active' && !order.assignedDriver
    );

    if (availableOrders.length === 0) {
      await sendTelegramMessage(chatId, 'üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.');
      return NextResponse.json({ success: true });
    }

    let message = `üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã</b>\n\n–î–æ—Å—Ç—É–ø–Ω–æ ${availableOrders.length} –∑–∞–∫–∞–∑–æ–≤:\n\n`;

    availableOrders.forEach((order, index) => {
      message += `${index + 1}. <b>${order.trackingNumber}</b>\n`;
      message += `   üìç ${order.from} ‚Üí ${order.to}\n`;
      message += `   üì¶ ${order.description}\n`;
      message += `   ‚öñÔ∏è ${order.weight} –∫–≥, ${order.volume} –º¬≥\n`;
      message += `   üí∞ ${order.finalPrice} —Ç–µ–Ω–≥–µ\n`;
      message += `   üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleDateString('ru-RU')}\n\n`;
    });

    const keyboard = {
      inline_keyboard: [
        [{ text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'refresh_available_orders' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
      ]
    };

    await sendTelegramMessage(chatId, message, keyboard);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:', error);
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
}