import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID || '-1002999769930';
const ADMIN_ID = '5450018125'; // ID –∞–¥–º–∏–Ω–∞

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö (–≤ serverless —Å—Ä–µ–¥–µ –ø–∏—à–µ–º –≤ /tmp)
const dataDir = process.env.DATA_DIR || path.join('/tmp', 'velta-data');
const driversFile = path.join(dataDir, 'drivers.json');
const ordersFile = path.join(dataDir, 'orders.json');
const userStatesFile = path.join(dataDir, 'user_states.json');

// –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ data —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync(dataDir)) {
  fs.mkdirSync(dataDir, { recursive: true });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
if (!fs.existsSync(driversFile)) {
  fs.writeFileSync(driversFile, '{}');
}
if (!fs.existsSync(ordersFile)) {
  fs.writeFileSync(ordersFile, '{}');
}
if (!fs.existsSync(userStatesFile)) {
  fs.writeFileSync(userStatesFile, '{}');
}

interface Driver {
  id: number;
  name: string;
  phone: string;
  carNumber: string;
  carType: string;
  registeredAt: string;
  status: 'active' | 'inactive';
}

interface Order {
  id: string;
  from: string;
  to: string;
  carType: string;
  description: string;
  createdAt: string;
  status: 'active' | 'assigned' | 'completed';
  bids: Bid[];
  assignedDriver?: number;
  finalPrice?: number;
  trackingNumber?: string;
}

interface Bid {
  driverId: number;
  driverName: string;
  driverPhone: string;
  carNumber: string;
  price: number;
  timestamp: string;
}

interface UserState {
  step?: string;
  orderStep?: string;
  biddingOrderId?: string;
  name?: string;
  phone?: string;
  carNumber?: string;
  carType?: string;
  from?: string;
  to?: string;
  description?: string;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
function loadDrivers(): Record<string, Driver> {
  try {
    return JSON.parse(fs.readFileSync(driversFile, 'utf8'));
  } catch (e) {
    return {};
  }
}

function saveDrivers(drivers: Record<string, Driver>) {
  fs.writeFileSync(driversFile, JSON.stringify(drivers, null, 2));
}

function loadOrders(): Record<string, Order> {
  try {
    return JSON.parse(fs.readFileSync(ordersFile, 'utf8'));
  } catch (e) {
    return {};
  }
}

function saveOrders(orders: Record<string, Order>) {
  fs.writeFileSync(ordersFile, JSON.stringify(orders, null, 2));
}

function loadUserStates(): Record<string, UserState> {
  try {
    return JSON.parse(fs.readFileSync(userStatesFile, 'utf8'));
  } catch (e) {
    return {};
  }
}

function saveUserStates(states: Record<string, UserState>) {
  fs.writeFileSync(userStatesFile, JSON.stringify(states, null, 2));
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
function generateOrderNumber(driverId: number): string {
  const orderNumber = Math.floor(Math.random() * 100000);
  return `${driverId}-${orderNumber}`;
}

async function sendTelegramMessage(chatId: string | number, text: string, replyMarkup?: object) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup,
      }),
    });

    return await response.json();
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return { ok: false, error: error };
  }
}

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É (—Å–Ω–∏–º–∞–µ—Ç —Å–ø–∏–Ω–Ω–µ—Ä –≤ Telegram)
async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false) {
  try {
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        callback_query_id: callbackQueryId,
        text,
        show_alert: showAlert
      })
    });
  } catch (error) {
    console.error('Error answering callback query:', error);
  }
}

// –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª—è–º
async function broadcastOrderToDrivers(orderId: string, order: Order) {
  const drivers = loadDrivers();
  let sentCount = 0;
  
  for (const driver of Object.values(drivers)) {
    // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –¢–°
    if (driver.carType.toLowerCase().includes(order.carType.toLowerCase()) || 
        order.carType.toLowerCase().includes(driver.carType.toLowerCase())) {
      
      const orderText = `üöõ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${order.from} ‚Üí ${order.to}
<b>–¢–∏–ø –¢–°:</b> ${order.carType}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${order.description}

–•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑?`;

      const keyboard = {
        inline_keyboard: [
          [{ text: 'üí∞ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ü–µ–Ω—É', callback_data: `bid_${orderId}` }],
          [{ text: '‚ùå –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data: 'skip' }]
        ]
      };

      await sendTelegramMessage(driver.id, orderText, keyboard);
      sentCount++;
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª –æ —Ä–∞—Å—Å—ã–ª–∫–µ
  await sendTelegramMessage(CHANNEL_ID, `üì¢ <b>–ó–∞–∫–∞–∑ ${orderId} —Ä–∞–∑–æ—Å–ª–∞–Ω!</b>

<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${order.from} ‚Üí ${order.to}
<b>–¢–∏–ø –¢–°:</b> ${order.carType}
<b>–†–∞–∑–æ—Å–ª–∞–Ω–æ –≤–æ–¥–∏—Ç–µ–ª—è–º:</b> ${sentCount}

–û–∂–∏–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω...`);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    if (body.message) {
      const message = body.message;
      const chatId = message.chat.id;
      const text = message.text || '';
      const userId = message.from.id;
      const userName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';

      const drivers = loadDrivers();
      const userStates = loadUserStates();
      const userState = userStates[userId] || {};

      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start') {
        if (drivers[userId]) {
          const driver = drivers[userId];
          const welcomeText = `üöõ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${driver.name}!</b>

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${driver.phone}
üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${driver.carNumber}
üîß –¢–∏–ø –¢–°: ${driver.carType}

–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã. –ö–æ–≥–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∑–∞–∫–∞–∑, –≤–∞–º –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.`;

          await sendTelegramMessage(chatId, welcomeText);
        } else {
          const welcomeText = `üöõ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Velta Trans!</b>

–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:`;

          const keyboard = {
            inline_keyboard: [
              [{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è', callback_data: 'register_driver' }],
              [{ text: '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data: 'info' }]
            ]
          };

          await sendTelegramMessage(chatId, welcomeText, keyboard);
        }
      }
      
      // –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–Ω–æ–ø–∫–µ)
      else if (text === '/register' || text.toLowerCase() === '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' || text.toLowerCase() === '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è') {
        const drivers = loadDrivers();
        if (drivers[userId]) {
          await sendTelegramMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /orders –∏–ª–∏ /status.');
        } else {
          await startDriverRegistration(userId, chatId);
        }
      }

      // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (—Å–∞–π—Ç)
      else if (text === '/calculate') {
        const calculateText = `üí∞ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–∑–∫–∏</b>

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ:
üåê <a href="https://velta-logistics.com">velta-logistics.com</a>

–ò–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:
üìû +7 700 277 00 06
üìß info@velta-logistics.com`;
        await sendTelegramMessage(chatId, calculateText);
      }
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
      else if (text === '/track') {
        const trackText = `üì¶ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞</b>

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
<code>WT123456-1700000000000</code>

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ–æ—Ä–º–æ–π –Ω–∞ —Å–∞–π—Ç–µ:
üåê <a href="https://velta-logistics.com">velta-logistics.com</a>`;
        await sendTelegramMessage(chatId, trackText);
      }
      
      // –ö–æ–Ω—Ç–∞–∫—Ç—ã
      else if (text === '/contact') {
        const contactText = `üìû <b>–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>

–¢–µ–ª–µ—Ñ–æ–Ω: +7 700 277 00 06
Email: info@velta-logistics.com
–°–∞–π—Ç: <a href="https://velta-logistics.com">velta-logistics.com</a>`;
        await sendTelegramMessage(chatId, contactText);
      }
      
      // –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
      else if (text === '/admin' && userId.toString() === ADMIN_ID) {
        const adminText = `üë®‚Äçüíº <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        const keyboard = {
          inline_keyboard: [
            [{ text: 'üì¶ –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'create_order' }],
            [{ text: 'üë• –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'list_drivers' }],
            [{ text: 'üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'list_orders' }]
          ]
        };

        await sendTelegramMessage(chatId, adminText, keyboard);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      else if (userState.step) {
        await handleRegistrationStep(userId, chatId, text, userState, userStates);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
      else if (userState.orderStep) {
        await handleOrderCreationStep(userId, chatId, text, userState, userStates);
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
      else if (userState.biddingOrderId) {
        await handleBidStep(userId, chatId, text, userState, userStates);
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback query
    else if (body.callback_query) {
      const callbackQuery = body.callback_query;
      const chatId = callbackQuery.message.chat.id;
      const data = callbackQuery.data;
      const userId = callbackQuery.from.id;
      const callbackQueryId = callbackQuery.id;

      if (data === 'register_driver') {
        await answerCallbackQuery(callbackQueryId);
        await startDriverRegistration(userId, chatId);
      } else if (data === 'info') {
        await answerCallbackQuery(callbackQueryId);
        const infoText = `‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</b>

<b>Velta Trans</b> - –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∞—è—Å—è –Ω–∞ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–∑–∫–∞—Ö.

<b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
1. –í—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç–µ—Å—å –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å
2. –ü–æ–ª—É—á–∞–µ—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
3. –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É
4. –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—É—á–∞–µ—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏

<b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>
üìû +7 700 277 00 06
üìß info@velta-logistics.com
üåê https://velta-logistics.com`;

        await sendTelegramMessage(chatId, infoText);
      } else if (data === 'create_order' && userId.toString() === ADMIN_ID) {
        await answerCallbackQuery(callbackQueryId);
        await startOrderCreation(userId, chatId);
      } else if (data === 'list_drivers' && userId.toString() === ADMIN_ID) {
        await answerCallbackQuery(callbackQueryId);
        await listDrivers(chatId);
      } else if (data === 'list_orders' && userId.toString() === ADMIN_ID) {
        await answerCallbackQuery(callbackQueryId);
        await listActiveOrders(chatId);
      } else if (data.startsWith('bid_')) {
        await answerCallbackQuery(callbackQueryId);
        const orderId = data.split('_')[1];
        await startBidding(userId, chatId, orderId);
      } else if (data.startsWith('select_driver_')) {
        await answerCallbackQuery(callbackQueryId, '–í–æ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω');
        const parts = data.split('_');
        const orderId = parts[2];
        const driverId = parts[3];
        await selectDriver(chatId, orderId, parseInt(driverId));
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('Webhook error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è
async function startDriverRegistration(userId: number, chatId: number) {
  const userStates = loadUserStates();
  userStates[userId] = { step: 'name' };
  saveUserStates(userStates);
  
  await sendTelegramMessage(chatId, `üìù <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—è</b>

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è:`);
}

async function handleRegistrationStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  const drivers = loadDrivers();
  
  if (userState.step === 'name') {
    userState.name = text;
    userState.step = 'phone';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 700 123 45 67):');
  } else if (userState.step === 'phone') {
    userState.phone = text;
    userState.step = 'carNumber';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ê123–ë–í01):');
  } else if (userState.step === 'carNumber') {
    userState.carNumber = text;
    userState.step = 'carType';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç, –ì–∞–∑–µ–ª—å, –¢–µ–Ω—Ç 10—Ç):');
  } else if (userState.step === 'carType') {
    userState.carType = text;
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
    drivers[userId] = {
      id: userId,
      name: userState.name!,
      phone: userState.phone!,
      carNumber: userState.carNumber!,
      carType: userState.carType!,
      registeredAt: new Date().toISOString(),
      status: 'active'
    };
    
    saveDrivers(drivers);
    delete userStates[userId];
    saveUserStates(userStates);
    
    const successText = `‚úÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

<b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üë§ –ò–º—è: ${userState.name}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${userState.phone}
üöõ –ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${userState.carNumber}
üîß –¢–∏–ø –¢–°: ${userState.carType}

–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö!`;

    await sendTelegramMessage(chatId, successText);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –≤–æ–¥–∏—Ç–µ–ª–µ
    await sendTelegramMessage(CHANNEL_ID, `üöõ <b>–ù–æ–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!</b>

üë§ <b>–ò–º—è:</b> ${userState.name}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${userState.phone}
üöõ <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${userState.carNumber}
üîß <b>–¢–∏–ø –¢–°:</b> ${userState.carType}
üÜî <b>Telegram ID:</b> ${userId}`);
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async function startOrderCreation(userId: number, chatId: number) {
  const userStates = loadUserStates();
  userStates[userId] = { orderStep: 'from' };
  saveUserStates(userStates);
  
  await sendTelegramMessage(chatId, `üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞</b>

–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:`);
}

async function handleOrderCreationStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  if (userState.orderStep === 'from') {
    userState.from = text;
    userState.orderStep = 'to';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:');
  } else if (userState.orderStep === 'to') {
    userState.to = text;
    userState.orderStep = 'carType';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–π —Ç–∏–ø –¢–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: –§—É—Ä–∞ 20—Ç, –¢–µ–Ω—Ç, –ì–∞–∑–µ–ª—å):');
  } else if (userState.orderStep === 'carType') {
    userState.carType = text;
    userState.orderStep = 'description';
    userStates[userId] = userState;
    saveUserStates(userStates);
    await sendTelegramMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–∑–∞:');
  } else if (userState.orderStep === 'description') {
    userState.description = text;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
    const orderId = Date.now().toString();
    const orders = loadOrders();
    
    orders[orderId] = {
      id: orderId,
      from: userState.from!,
      to: userState.to!,
      carType: userState.carType!,
      description: userState.description!,
      createdAt: new Date().toISOString(),
      status: 'active',
      bids: []
    };
    
    saveOrders(orders);
    delete userStates[userId];
    saveUserStates(userStates);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤—Å–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≤–æ–¥–∏—Ç–µ–ª—è–º
    await broadcastOrderToDrivers(orderId, orders[orderId]);
    
    await sendTelegramMessage(chatId, `‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>

<b>ID –∑–∞–∫–∞–∑–∞:</b> ${orderId}
<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${userState.from} ‚Üí ${userState.to}
<b>–¢–∏–ø –¢–°:</b> ${userState.carType}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${userState.description}

–ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ.`);
  }
}

// –ù–∞—á–∞–ª–æ —Ç–æ—Ä–≥–æ–≤
async function startBidding(userId: number, chatId: number, orderId: string) {
  const orders = loadOrders();
  const drivers = loadDrivers();
  
  if (!orders[orderId]) {
    await sendTelegramMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  if (!drivers[userId]) {
    await sendTelegramMessage(chatId, '‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≤–æ–¥–∏—Ç–µ–ª—å.');
    return;
  }
  
  const userStates = loadUserStates();
  userStates[userId] = { biddingOrderId: orderId };
  saveUserStates(userStates);
  
  const order = orders[orderId];
  await sendTelegramMessage(chatId, `üí∞ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>

<b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}

–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 150000):`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏
async function handleBidStep(userId: number, chatId: number, text: string, userState: UserState, userStates: Record<string, UserState>) {
  const price = parseInt(text);
  
  if (isNaN(price) || price <= 0) {
    await sendTelegramMessage(chatId, '‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —á–∏—Å–ª–æ–º.');
    return;
  }
  
  const orderId = userState.biddingOrderId!;
  const orders = loadOrders();
  const drivers = loadDrivers();
  const driver = drivers[userId];
  
  if (!orders[orderId] || !driver) {
    await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞–≤–∫–∏.');
    delete userStates[userId];
    saveUserStates(userStates);
    return;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–≤–∫—É –∫ –∑–∞–∫–∞–∑—É
  orders[orderId].bids.push({
    driverId: userId,
    driverName: driver.name,
    driverPhone: driver.phone,
    carNumber: driver.carNumber,
    price: price,
    timestamp: new Date().toISOString()
  });
  
  saveOrders(orders);
  delete userStates[userId];
  saveUserStates(userStates);
  
  await sendTelegramMessage(chatId, `‚úÖ <b>–í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!</b>

<b>–¶–µ–Ω–∞:</b> ${price.toLocaleString()} —Ç–µ–Ω–≥–µ

–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.`);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
  const order = orders[orderId];
  const bidText = `üí∞ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>

<b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}
<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}
<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}
<b>–¶–µ–Ω–∞:</b> ${price.toLocaleString()} —Ç–µ–Ω–≥–µ`;

  const keyboard = {
    inline_keyboard: [
      [{ text: `‚úÖ –í—ã–±—Ä–∞—Ç—å ${driver.name}`, callback_data: `select_driver_${orderId}_${userId}` }]
    ]
  };

  await sendTelegramMessage(CHANNEL_ID, bidText, keyboard);
}

// –í—ã–±–æ—Ä –≤–æ–¥–∏—Ç–µ–ª—è
async function selectDriver(chatId: number, orderId: string, driverId: number) {
  const orders = loadOrders();
  const drivers = loadDrivers();
  
  const order = orders[orderId];
  const driver = drivers[driverId];
  
  if (!order || !driver) {
    await sendTelegramMessage(chatId, '‚ùå –ó–∞–∫–∞–∑ –∏–ª–∏ –≤–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
    return;
  }
  
  // –ù–∞—Ö–æ–¥–∏–º —Å—Ç–∞–≤–∫—É –≤–æ–¥–∏—Ç–µ–ª—è
  const bid = order.bids.find(b => b.driverId === driverId);
  if (!bid) {
    await sendTelegramMessage(chatId, '‚ùå –°—Ç–∞–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
    return;
  }
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (WTID-ORDERID)
  const trackingNumber = `WT${driverId}-${orderId}`;
  
  // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
  orders[orderId].status = 'assigned';
  orders[orderId].assignedDriver = driverId;
  orders[orderId].finalPrice = bid.price;
  orders[orderId].trackingNumber = trackingNumber;
  
  saveOrders(orders);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
  await sendTelegramMessage(driverId, `üéâ <b>–í–∞—Å –≤—ã–±—Ä–∞–ª–∏!</b>

<b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}
<b>–¶–µ–Ω–∞:</b> ${bid.price.toLocaleString()} —Ç–µ–Ω–≥–µ
<b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> <code>${trackingNumber}</code>

–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.`);
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
  for (const otherBid of order.bids) {
    if (otherBid.driverId !== driverId) {
      await sendTelegramMessage(otherBid.driverId, `üòî <b>–ó–∞–∫–∞–∑ –∑–∞–∫—Ä—ã—Ç</b>

–ó–∞–∫–∞–∑ ${order.from} ‚Üí ${order.to} –≤–∑—è–ª –¥—Ä—É–≥–æ–π –≤–æ–¥–∏—Ç–µ–ª—å.
–ñ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã!`);
    }
  }
  
  // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
  await sendTelegramMessage(CHANNEL_ID, `‚úÖ <b>–ó–∞–∫–∞–∑ ${orderId} –∑–∞–∫—Ä—ã—Ç!</b>

<b>–í—ã–±—Ä–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}
<b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}
<b>–¶–µ–Ω–∞:</b> ${bid.price.toLocaleString()} —Ç–µ–Ω–≥–µ
<b>–ù–æ–º–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b> <code>${trackingNumber}</code>

–°–≤—è–∂–∏—Ç–µ—Å—å —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è.`);
}

// –°–ø–∏—Å–æ–∫ –≤–æ–¥–∏—Ç–µ–ª–µ–π
async function listDrivers(chatId: number) {
  const drivers = loadDrivers();
  const driversList = Object.values(drivers);
  
  if (driversList.length === 0) {
    await sendTelegramMessage(chatId, 'üìã –í–æ–¥–∏—Ç–µ–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
    return;
  }
  
  let text = `üë• <b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª–∏ (${driversList.length}):</b>\n\n`;
  
  driversList.forEach((driver, index) => {
    text += `${index + 1}. <b>${driver.name}</b>
üì± ${driver.phone}
üöõ ${driver.carNumber} (${driver.carType})
üÜî ${driver.id}

`;
  });
  
  await sendTelegramMessage(chatId, text);
}

// –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
async function listActiveOrders(chatId: number) {
  const orders = loadOrders();
  const activeOrders = Object.values(orders).filter(order => order.status === 'active');
  
  if (activeOrders.length === 0) {
    await sendTelegramMessage(chatId, 'üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.');
    return;
  }
  
  let text = `üì¶ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (${activeOrders.length}):</b>\n\n`;
  
  activeOrders.forEach((order, index) => {
    text += `${index + 1}. <b>${order.from} ‚Üí ${order.to}</b>
üîß ${order.carType}
üìù ${order.description}
üí∞ –°—Ç–∞–≤–æ–∫: ${order.bids.length}
üÜî ${order.id}

`;
  });
  
  await sendTelegramMessage(chatId, text);
}

export async function GET() {
  return NextResponse.json({ 
    status: 'Telegram bot webhook is running',
    timestamp: new Date().toISOString()
  });
}