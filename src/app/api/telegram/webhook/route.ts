import { NextRequest, NextResponse } from 'next/server';
import { getDb } from '@/lib/mongodb';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID || '-1002999769930';

// MongoDB collections
let db: any;
let driversCollection: any;
let ordersCollection: any;
let userStatesCollection: any;
let staffUsersCollection: any;
let orderOffersCollection: any;
let wizardStatesCollection: any;
let trackingUpdatesCollection: any;

// Temp in-memory stores (demo mode friendly)
const tempOrders: Record<number, any> = {};
const userLanguage: Record<number, 'ru' | 'kz' | 'en' | 'zh'> = {};
const tempOffers: Record<string, { driverId: number; price: number; at: string; status?: string }[]> = {};

// Initialize MongoDB connection
async function initDB() {
  if (!db) {
    try {
      db = await getDb();
      if (!db) {
        console.warn('‚ö†Ô∏è MongoDB not available - running in demo mode');
        return;
      }
      
      driversCollection = db.collection('drivers');
      ordersCollection = db.collection('orders');
      userStatesCollection = db.collection('user_states');
      staffUsersCollection = db.collection('staff_users');
      orderOffersCollection = db.collection('order_offers');
      wizardStatesCollection = db.collection('wizard_states');
      trackingUpdatesCollection = db.collection('tracking_updates');
      
      // Create indexes for better performance
      await driversCollection.createIndex({ phone: 1 });
      await ordersCollection.createIndex({ status: 1 });
      await userStatesCollection.createIndex({ userId: 1 });
      await orderOffersCollection.createIndex({ orderId: 1 });
      await wizardStatesCollection.createIndex({ userId: 1 });
      await trackingUpdatesCollection.createIndex({ orderId: 1 }, { expireAfterSeconds: 3600 }); // TTL for tracking updates
      await trackingUpdatesCollection.createIndex({ createdAt: 1 }, { expireAfterSeconds: 15552000 }); // 180 –¥–Ω–µ–π
      
      console.log('‚úÖ MongoDB connected successfully');
    } catch (error) {
      console.error('‚ùå MongoDB connection error:', error);
      console.warn('‚ö†Ô∏è Running in demo mode without database');
    }
  }
}

// Data access functions for MongoDB
async function getDrivers() {
  await initDB();
  if (!driversCollection) {
    console.warn('‚ö†Ô∏è MongoDB not available - returning demo data');
    return [
      { id: 'demo_1', name: '–•–∞–±–¥—É–ª–º–∞–Ω–∞–ø', carNumber: '–ì–ê–ó 161AFH03', rating: null, phone: '+87054060674', userId: null },
      { id: 'demo_2', name: '–î–µ–º–æ –í–æ–¥–∏—Ç–µ–ª—å 2', carNumber: 'DEMO 002', rating: null, phone: '+77051234567', userId: null }
    ];
  }
  return await driversCollection.find({}).toArray();
}

async function saveDriver(driver: any) {
  await initDB();
  if (!driversCollection) {
    console.warn('‚ö†Ô∏è MongoDB not available - demo mode');
    return { acknowledged: true, insertedId: 'demo_' + Date.now() };
  }
  
  if (driver.id) {
    return await driversCollection.updateOne(
      { id: driver.id },
      { $set: driver },
      { upsert: true }
    );
  } else {
    driver.id = Date.now();
    driver.createdAt = new Date().toISOString();
    return await driversCollection.insertOne(driver);
  }
}

async function getOrders() {
  await initDB();
  if (!ordersCollection) {
    console.warn('‚ö†Ô∏è MongoDB not available - returning demo data');
    return [
      {
        id: 'order_1',
        from: '–ê–ª–º–∞—Ç—ã',
        to: '–¢–∞—à–∫–µ–Ω—Ç',
        cargo: 'Pepsi',
        weight: '10 —Ç–æ–Ω–Ω',
        volume: '25 –º¬≥',
        status: 'active',
        driverId: null,
        clientId: 'client_1',
        createdAt: new Date().toISOString(),
        price: null,
        driverLocation: null,
        lastStatusUpdate: null
      }
    ];
  }
  return await ordersCollection.find({}).toArray();
}

async function saveOrder(order: any) {
  await initDB();
  if (!ordersCollection) {
    console.warn('‚ö†Ô∏è MongoDB not available - demo mode');
    return { acknowledged: true, insertedId: 'demo_order_' + Date.now() };
  }
  
  if (order.id) {
    return await ordersCollection.updateOne(
      { id: order.id },
      { $set: order },
      { upsert: true }
    );
  } else {
    order.id = `order_${Date.now()}`;
    order.createdAt = new Date().toISOString();
    return await ordersCollection.insertOne(order);
  }
}

async function getAvailableOrders() {
  const orders = await getOrders();
  return orders.filter((order: any) => order.status === 'active' && !order.driverId);
}

async function assignOrderToDriver(orderId: string, driverId: string, price: number) {
  const orders = await getOrders();
  const targetOrder = orders.find((o: any) => o.id === orderId);
  
  if (targetOrder) {
    // Get driver info
    const drivers = await getDrivers();
    const driver = drivers.find((d: any) => d.userId === parseInt(driverId));
    
    if (driver) {
      // Send notification to staff channel
      const message = `üí∞ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã!</b>\n\n` +
        `üìã <b>–ó–∞–∫–∞–∑:</b> ${targetOrder.from} ‚Üí ${targetOrder.to}\n` +
        `üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}\n` +
        `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}\n` +
        `üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}\n` +
        `üíµ <b>–¶–µ–Ω–∞:</b> ${price.toLocaleString()} —Ç–µ–Ω–≥–µ\n\n` +
        `‚è∞ ${new Date().toLocaleString('ru-RU')}`;
      await sendNotificationToChannel(message);
    }
    
    targetOrder.driverId = driverId;
    targetOrder.price = price;
    targetOrder.status = 'assigned';
    targetOrder.assignedAt = new Date().toISOString();
    await saveOrder(targetOrder);
    return true;
  }
  return false;
}

async function updateDriverStatus(driverId: string, status: string, location?: string) {
  const drivers = await getDrivers();
  const driver = drivers.find((d: any) => d.userId === driverId);
  
  if (driver) {
    driver.currentStatus = status;
    driver.lastStatusUpdate = new Date().toISOString();
    if (location) {
      driver.currentLocation = location;
    }
    await saveDriver(driver);
    return true;
  }
  return false;
}

async function getUserState(userId: number) {
  await initDB();
  if (!userStatesCollection) {
    console.warn('‚ö†Ô∏è MongoDB not available - demo mode');
    return null;
  }
  const state = await userStatesCollection.findOne({ userId });
  return state ? state.state : null;
}

async function setUserState(userId: number, state: any) {
  await initDB();
  if (!userStatesCollection) {
    console.warn('‚ö†Ô∏è MongoDB not available - demo mode');
    return { acknowledged: true, modifiedCount: 1 };
  }
  
  return await userStatesCollection.updateOne(
    { userId },
    { $set: { userId, state, lastActivity: new Date().toISOString() } },
    { upsert: true }
  );
}

// Helper functions
async function sendTelegramMessage(chatId: string, text: string, keyboard?: any) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  const body: any = {
    chat_id: chatId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    body.reply_markup = keyboard;
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
    
    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
    }
    
    return response.ok;
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
}

async function editTelegramMessage(chatId: string, messageId: number, text: string, keyboard?: any) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/editMessageText`;
  const body: any = {
    chat_id: chatId,
    message_id: messageId,
    text: text,
    parse_mode: 'HTML'
  };
  
  if (keyboard) {
    body.reply_markup = keyboard;
  }
  
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(body)
    });
    
    if (!response.ok) {
      console.error('Telegram API edit error:', await response.text());
    }
    
    return response.ok;
  } catch (error) {
    console.error('Error editing Telegram message:', error);
    return false;
  }
}

async function answerCallbackQuery(callbackQueryId: string, text?: string, showAlert: boolean = false) {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/answerCallbackQuery`;
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ callback_query_id: callbackQueryId, text, show_alert: showAlert })
    });
  } catch (e) {
    console.error('answerCallbackQuery error', e);
  }
}

async function sendNotificationToChannel(message: string) {
  try {
    const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: CHANNEL_ID, text: message, parse_mode: 'HTML' })
    });
  } catch (e) {
    console.error('Channel notify error', e);
  }
}

// Inline keyboard builders
function buildMainMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üöõ –í–æ–¥–∏—Ç–µ–ª—è–º', callback_data: 'section_drivers' }],
      [{ text: 'üì¶ –ö–ª–∏–µ–Ω—Ç–∞–º', callback_data: 'section_clients' }],
      [{ text: 'üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º', callback_data: 'section_staff' }],
      [{ text: 'üåê –°–º–µ–Ω–∞ —è–∑—ã–∫–∞', callback_data: 'change_language' }]
    ]
  };
}

function buildSectionsMenu() {
  return {
    inline_keyboard: [
      [
        { text: 'üöõ –í–æ–¥–∏—Ç–µ–ª—è–º', callback_data: 'section_drivers' },
        { text: 'üì¶ –ö–ª–∏–µ–Ω—Ç–∞–º', callback_data: 'section_clients' }
      ],
      [
        { text: '‚≠ê –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª–µ–π', callback_data: 'section_rating' },
        { text: 'üë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º', callback_data: 'section_staff' }
      ],
      [
        { text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }
      ]
    ]
  };
}

function buildUnregisteredDriverMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data: 'driver_register' }],
      [{ text: 'üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data: 'driver_login' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
}

function buildRegisteredDriverMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üìä –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'driver_orders' }],
      [{ text: 'üöö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã', callback_data: 'driver_available_orders' }],
      [{ text: 'üìç –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å', callback_data: 'driver_update_status' }],
      [{ text: '‚≠ê –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥', callback_data: 'driver_rating' }],
      [{ text: 'üí∞ –ó–∞—Ä–∞–±–æ—Ç–æ–∫', callback_data: 'driver_earnings' }],
      [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'driver_profile' }],
      [{ text: 'üö™ –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', callback_data: 'driver_logout' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
}

function buildClientMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üöö –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'client_create_order' }],
      [{ text: 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', callback_data: 'client_orders' }],
      [{ text: 'üìç –û—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑', callback_data: 'client_track' }],
      [{ text: 'üí≥ –û–ø–ª–∞—Ç–∞', callback_data: 'client_payment' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
}

function buildStaffMenu() {
  return {
    inline_keyboard: [
      [{ text: 'üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'staff_create_order' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'staff_stats' }],
      [{ text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏', callback_data: 'staff_manage_orders' }],
      [{ text: 'üöö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏', callback_data: 'staff_manage_drivers' }],
      [{ text: 'üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'staff_notifications' }],
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'staff_settings' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
}

function buildBackButton(callbackData: string) {
  return {
    inline_keyboard: [
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: callbackData }]
    ]
  };
}

// Menu handlers
async function showMainMenu(chatId: string, messageId?: number) {
  const text = 'üöõ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Velta Trans!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:';
  const keyboard = buildMainMenu();
  
  if (messageId) {
    await editTelegramMessage(chatId, messageId, text, keyboard);
  } else {
    await sendTelegramMessage(chatId, text, keyboard);
  }
}

async function showDriverMenu(chatId: string, messageId: number, userId?: number) {
  // Check if driver is registered
  if (userId) {
    const drivers = await getDrivers();
    const driver = drivers.find((d: any) => d.userId === userId);
    
    if (driver) {
      // Driver is registered - show full menu
      const ratingText = driver.rating ? `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${driver.rating.toFixed(2)}/5` : '‚≠ê –†–µ–π—Ç–∏–Ω–≥: –ù/–î';
      const text = `üöõ –†–∞–∑–¥–µ–ª –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\nüë§ ${driver.name}\nüöó ${driver.carNumber}\n${ratingText}`;
      const keyboard = buildRegisteredDriverMenu();
      await editTelegramMessage(chatId, messageId, text, keyboard);
      return;
    }
  }
  
  // Driver is not registered or logged out - show registration/login menu
  const text = 'üöõ –†–∞–∑–¥–µ–ª –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:';
  const keyboard = buildUnregisteredDriverMenu();
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

async function showClientMenu(chatId: string, messageId: number) {
  const text = 'üì¶ –†–∞–∑–¥–µ–ª –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
  const keyboard = buildClientMenu();
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

async function showStaffMenu(chatId: string, messageId: number) {
  const text = 'üë§ –†–∞–∑–¥–µ–ª –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:';
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üìã –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑', callback_data: 'staff_create_order' }],
      [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'staff_stats' }],
      [{ text: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏', callback_data: 'staff_manage_orders' }],
      [{ text: 'üöö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏', callback_data: 'staff_manage_drivers' }],
      [{ text: 'üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', callback_data: 'staff_notifications' }],
      [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'staff_settings' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

async function showLanguageMenu(chatId: string, messageId: number) {
  const text = 'üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language / ÈÄâÊã©ËØ≠Ë®Ä / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:';
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üá∑üá∫ –†—É—Å—Å–∫–∏–π', callback_data: 'lang_ru' }],
      [{ text: 'üá∞üáø “ö–∞–∑–∞“õ—à–∞', callback_data: 'lang_kz' }],
      [{ text: 'üá∫üá∏ English', callback_data: 'lang_en' }],
      [{ text: 'üá®üá≥ ‰∏≠Êñá', callback_data: 'lang_zh' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Staff login credentials (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const STAFF_CREDENTIALS = {
  'admin': 'velta2024',
  'manager': 'velta2024',
  'logist': 'velta2024'
};

// Check if user is staff
function isStaffUser(userId: number): boolean {
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
  return true; // –ü–æ–∫–∞ —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
}

// Show staff login menu
async function showStaffLoginMenu(chatId: string, messageId: number) {
  const text = 'üë§ –†–∞–∑–¥–µ–ª –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n\n–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É:';
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É', callback_data: 'staff_login' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_main' }]
    ]
  };
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Health check endpoint
export async function GET(request: NextRequest) {
  // Skip execution during build time
  if (process.env.NODE_ENV === 'production' && !process.env.MONGODB_URI) {
    return NextResponse.json({
      success: true,
      message: 'Telegram bot webhook is running (demo mode)',
      mongodb: 'not configured'
    });
  }

  try {
    await initDB();
    return NextResponse.json({
      success: true,
      message: 'Telegram bot webhook is running',
      mongodb: db ? 'connected' : 'demo mode'
    });
  } catch (error) {
    console.error('‚ùå Health check error:', error);
    return NextResponse.json({
      success: true,
      message: 'Telegram bot webhook is running (demo mode)',
      mongodb: 'error'
    });
  }
}

// Main webhook handler
export async function POST(request: NextRequest) {
  // Skip execution during build time
  if (process.env.NODE_ENV === 'production' && !process.env.MONGODB_URI) {
    return NextResponse.json({ success: true });
  }

  try {
    const body = await request.json();
    console.log('üì® Webhook received:', JSON.stringify(body, null, 2));
    
    // Handle different types of updates
    if (body.message) {
      await handleMessage(body.message);
    } else if (body.callback_query) {
      try { await answerCallbackQuery(body.callback_query.id); } catch {}
      await handleCallbackQuery(body.callback_query);
    }
    
    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('‚ùå Webhook error:', error);
    return NextResponse.json({ success: false, error: 'Internal server error' }, { status: 500 });
  }
}

// Handle incoming messages
async function handleMessage(message: any) {
  const { chat, text, from } = message;
  const userId = from.id;
  
  if (!text) return;
  
  if (text === '/start') {
    await showMainMenu(chat.id);
  } else {
    // Handle other text messages
    const userState = await getUserState(userId);
    if (userState) {
      await handleUserState(userId, text, chat.id, userState);
    }
  }
}

// Handle user states
async function handleUserState(userId: number, text: string, chatId: string, state: string) {
  switch (state) {
    case 'waiting_for_name':
      await setUserState(userId, 'waiting_for_phone');
      await sendTelegramMessage(chatId, 'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', buildBackButton('back_driver_register'));
      break;
      
    case 'waiting_for_phone':
      await setUserState(userId, 'waiting_for_car');
      await sendTelegramMessage(chatId, 'üöó –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è:', buildBackButton('back_driver_register'));
      break;
      
    case 'waiting_for_car':
      await setUserState(userId, null);
      await sendTelegramMessage(chatId, '‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞–∫–∞–∑—ã.');
      break;
      
    case 'waiting_for_phone_login':
      // Handle driver login by phone number
      const drivers = await getDrivers();
      const driver = findDriverByPhone(text, drivers);
      
      if (driver) {
        // Driver found - link user ID to driver and show success
        await saveDriver({ ...driver, userId });
        await setUserState(userId, null);
        const ratingText = driver.rating ? `‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${driver.rating.toFixed(2)}/5` : '‚≠ê –†–µ–π—Ç–∏–Ω–≥: –ù/–î';
        await sendTelegramMessage(chatId, `‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\nüë§ ${driver.name}\nüöó ${driver.carNumber}\n${ratingText}`);
        
        // Show driver menu with full access
        setTimeout(async () => {
          await showMainMenu(chatId);
        }, 1000);
      } else {
        // Driver not found
        await sendTelegramMessage(chatId, '‚ùå –í–æ–¥–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.');
      }
      break;
      
    case 'waiting_for_custom_price':
      const price = parseInt(text);
      if (isNaN(price) || price <= 0) {
        await sendTelegramMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã).');
        return;
      }
      
      // Get the order ID from user state or use a default
      const userState = await getUserState(userId);
      if (userState && userState.includes('custom_price_')) {
        const orderId = userState.replace('custom_price_', '');
        await assignOrderToDriver(orderId, userId.toString(), price);
        await setUserState(userId, null);
        await sendTelegramMessage(chatId, `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑!\nüí∞ –í–∞—à–∞ —Ü–µ–Ω–∞: ${price} —Ç–µ–Ω–≥–µ\n\n–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);
      } else {
        await sendTelegramMessage(chatId, '‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;
      
    case 'waiting_for_staff_username':
      // Store username and ask for password
      await setUserState(userId, `waiting_for_staff_password_${text}`);
      await sendTelegramMessage(chatId, 'üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', buildBackButton('back_main'));
      break;
      
    case 'waiting_for_staff_password_':
      // Extract username from state and check password
      const username = state.replace('waiting_for_staff_password_', '');
      const password = text;
      
      if (STAFF_CREDENTIALS[username as keyof typeof STAFF_CREDENTIALS] === password) {
        await setUserState(userId, 'staff_logged_in');
        await sendTelegramMessage(chatId, `‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\nüë§ –°–æ—Ç—Ä—É–¥–Ω–∏–∫: ${username}\n\n–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.`);
        
        // Show staff menu
        setTimeout(async () => {
          await showMainMenu(chatId);
        }, 1000);
      } else {
        await sendTelegramMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      }
      break;

    case 'waiting_staff_from_custom':
      await setWizard(userId, { ...(await getWizard(userId)), from: text });
      await setUserState(userId, null);
      await showOrderCreationForm(chatId, undefined as any, 'to', userId);
      break;

    case 'waiting_staff_to_custom':
      await setWizard(userId, { ...(await getWizard(userId)), to: text });
      await setUserState(userId, null);
      await showOrderCreationForm(chatId, undefined as any, 'cargo', userId);
      break;

    case 'waiting_staff_cargo':
      await setWizard(userId, { ...(await getWizard(userId)), cargo: text });
      await setUserState(userId, null);
      await showOrderCreationForm(chatId, undefined as any, 'weight', userId);
      break;

    case 'waiting_staff_weight':
      await setWizard(userId, { ...(await getWizard(userId)), weight: text });
      await setUserState(userId, null);
      await showOrderCreationForm(chatId, undefined as any, 'volume', userId);
      break;

    case 'waiting_staff_volume':
      await setWizard(userId, { ...(await getWizard(userId)), volume: text });
      await setUserState(userId, null);
      await showOrderCreationForm(chatId, undefined as any, 'confirm', userId);
      break;
  }
}

// Handle callback queries
async function handleCallbackQuery(callbackQuery: any) {
  const { data, from, message } = callbackQuery;
  const userId = from.id;
  const chatId = message.chat.id;
  const messageId = message.message_id;
  
  console.log('üîò Callback query received:', data);
  
  switch (data) {
    case 'change_language':
      await showLanguageMenu(chatId, messageId);
      break;
      
    case 'back_main':
      await showMainMenu(chatId, messageId);
      break;
      
    case 'section_drivers':
      await showDriverMenu(chatId, messageId, userId);
      break;
      
    case 'section_clients':
      await showClientMenu(chatId, messageId);
      break;
      
    case 'section_staff':
      if (isStaffUser(userId)) {
        await showStaffMenu(chatId, messageId);
      } else {
        await showStaffLoginMenu(chatId, messageId);
      }
      break;
      
    case 'section_rating':
      await showDriverRating(chatId, messageId);
      break;
      
    case 'driver_register':
      await setUserState(userId, 'waiting_for_name');
      await editTelegramMessage(chatId, messageId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:', buildBackButton('back_driver_menu'));
      break;
      
    case 'driver_login':
      await setUserState(userId, 'waiting_for_phone_login');
      await editTelegramMessage(chatId, messageId, 'üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É:', buildBackButton('back_driver_menu'));
      break;
      
    case 'driver_orders':
      await showDriverOrders(chatId, messageId, userId);
      break;
      
    case 'driver_available_orders':
      await showAvailableOrders(chatId, messageId, userId);
      break;
      
    case 'driver_update_status':
      await setUserState(userId, 'waiting_for_status');
      await editTelegramMessage(chatId, messageId, 'üìç –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', {
        inline_keyboard: [
          [{ text: 'üöó –í –ø—É—Ç–∏', callback_data: 'status_in_transit' }],
          [{ text: '‚õΩ –ù–∞ –∑–∞–ø—Ä–∞–≤–∫–µ', callback_data: 'status_refueling' }],
          [{ text: 'üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞', callback_data: 'status_stopped' }],
          [{ text: 'üèÅ –ü—Ä–∏–±—ã–ª', callback_data: 'status_arrived' }],
          [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
        ]
      });
      break;
      
    case 'driver_rating':
      const drivers = await getDrivers();
      const currentDriver = drivers.find((d: any) => d.userId === userId);
      if (currentDriver && currentDriver.rating) {
        await editTelegramMessage(chatId, messageId, `‚≠ê –í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥: ${currentDriver.rating.toFixed(2)}/5`, buildBackButton('back_driver_menu'));
      } else {
        await editTelegramMessage(chatId, messageId, '‚≠ê –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.', buildBackButton('back_driver_menu'));
      }
      break;
      
    case 'driver_earnings':
      await editTelegramMessage(chatId, messageId, 'üí∞ –í–∞—à –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –∑–∞ –º–µ—Å—è—Ü: 150,000 —Ç–µ–Ω–≥–µ', buildBackButton('back_driver_menu'));
      break;
      
    case 'driver_profile':
      await showDriverProfile(chatId, messageId, userId);
      break;
      
    case 'driver_logout':
      await setUserState(userId, null);
      await showMainMenu(chatId);
      break;
      
    case 'back_driver_menu':
      await showDriverMenu(chatId, messageId, userId);
      break;
      
    case 'staff_login':
      await setUserState(userId, 'waiting_for_staff_username');
      await editTelegramMessage(chatId, messageId, 'üë§ –í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', buildBackButton('back_main'));
      break;
      
    case 'status_in_transit':
      await updateDriverStatus(userId.toString(), '–í –ø—É—Ç–∏');
      await editTelegramMessage(chatId, messageId, '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: üöó –í –ø—É—Ç–∏', buildBackButton('back_driver_menu'));
      break;
      
    case 'status_refueling':
      await updateDriverStatus(userId.toString(), '–ù–∞ –∑–∞–ø—Ä–∞–≤–∫–µ');
      await editTelegramMessage(chatId, messageId, '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ‚õΩ –ù–∞ –∑–∞–ø—Ä–∞–≤–∫–µ', buildBackButton('back_driver_menu'));
      break;
      
    case 'status_stopped':
      await updateDriverStatus(userId.toString(), '–û—Å—Ç–∞–Ω–æ–≤–∫–∞');
      await editTelegramMessage(chatId, messageId, '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞', buildBackButton('back_driver_menu'));
      break;
      
    case 'status_arrived':
      await updateDriverStatus(userId.toString(), '–ü—Ä–∏–±—ã–ª');
      await editTelegramMessage(chatId, messageId, '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: üèÅ –ü—Ä–∏–±—ã–ª', buildBackButton('back_driver_menu'));
      break;
      
    case 'client_create_order':
      await setUserState(userId, 'waiting_for_order_from');
      await editTelegramMessage(chatId, messageId, 'üìç –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑?', buildBackButton('back_client_menu'));
      break;
      
    case 'client_orders':
      await showClientOrders(chatId, messageId, userId);
      break;
      
    case 'client_track':
      await editTelegramMessage(chatId, messageId, 'üìç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', buildBackButton('back_client_menu'));
      break;
      
    case 'client_payment':
      await editTelegramMessage(chatId, messageId, 'üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:', buildBackButton('back_client_menu'));
      break;
      
    case 'staff_stats':
      await showAnalytics(chatId, messageId);
      break;
      
    case 'staff_manage_orders':
      await showStaffOrdersManagement(chatId, messageId);
      break;
      
    case 'staff_manage_drivers':
      await showStaffDriversManagement(chatId, messageId);
      break;
      
    case 'staff_notifications':
      await editTelegramMessage(chatId, messageId, 'üì¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏', buildBackButton('back_staff_menu'));
      break;
      
    case 'staff_settings':
      await showStaffSettings(chatId, messageId);
      break;
      
    case 'staff_create_order':
      await setWizard(userId, {});
      await showOrderCreationForm(chatId, messageId, 'from', userId);
      break;

    case 'order_create_from':
      await showOrderCreationForm(chatId, messageId, 'from', userId);
      break;

    case 'order_from_custom':
      await setUserState(userId, 'waiting_staff_from_custom');
      await editTelegramMessage(chatId, messageId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é:', buildBackButton('order_create_from'));
      break;

    case 'order_to_custom':
      await setUserState(userId, 'waiting_staff_to_custom');
      await editTelegramMessage(chatId, messageId, '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é:', buildBackButton('order_create_to'));
      break;

    case 'order_create_to':
      await showOrderCreationForm(chatId, messageId, 'to', userId);
      break;

    case 'order_create_cargo':
      await showOrderCreationForm(chatId, messageId, 'cargo', userId);
      await setUserState(userId, 'waiting_staff_cargo');
      break;

    case 'order_create_weight':
      await showOrderCreationForm(chatId, messageId, 'weight', userId);
      await setUserState(userId, 'waiting_staff_weight');
      break;

    case 'order_create_volume':
      await showOrderCreationForm(chatId, messageId, 'volume', userId);
      await setUserState(userId, 'waiting_staff_volume');
      break;

    case 'order_send': {
      const state = await getWizard(userId);
      if (!state?.from || !state?.to || !state?.cargo || !state?.weight || !state?.volume) {
        await editTelegramMessage(chatId, messageId, '‚ùå –ù–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é.', buildBackButton('order_create_from'));
        break;
      }
      const newOrder = {
        id: `order_${Date.now()}`,
        ...state,
        status: 'active',
        createdAt: new Date().toISOString()
      };
      await saveOrder(newOrder);
      await setWizard(userId, {});
      await editTelegramMessage(chatId, messageId, '‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ —Ä–∞–∑–æ—Å–ª–∞–Ω –≤–æ–¥–∏—Ç–µ–ª—è–º.', buildBackButton('back_staff_menu'));
      await broadcastOrderToDrivers(newOrder);
      break;
    }

    case 'offer_price_': {
      const [, ordId, priceStr] = data.split('_');
      const price = parseInt(priceStr);
      if (isNaN(price) || price <= 0) {
        await editTelegramMessage(chatId, messageId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.', buildBackButton('back_available_orders'));
        break;
      }
      await recordDriverOffer(ordId, userId, price);
      await editTelegramMessage(chatId, messageId, `‚úÖ –í–∞—à–∞ —Ü–µ–Ω–∞ ${price} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`, buildBackButton('back_available_orders'));
      break;
    }

    case 'custom_price_': {
      const ordId = data.replace('custom_price_', '');
      await setUserState(userId, `waiting_for_custom_price_${ordId}`);
      await editTelegramMessage(chatId, messageId, 'üí∞ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É –≤ —Ç–µ–Ω–≥–µ:', buildBackButton('back_available_orders'));
      break;
    }

    case 'staff_offers_': {
      const [, orderId, pageStr] = data.split('_');
      await showOrderOffersPager(chatId, messageId, orderId, parseInt(pageStr || '1'));
    return;
  }
  
    case 'offers_prev_': {
      const [, orderId, pageStr] = data.split('_');
      await showOrderOffersPager(chatId, messageId, orderId, parseInt(pageStr || '1'));
      return;
    }

    case 'offers_next_': {
      const [, orderId, pageStr] = data.split('_');
      await showOrderOffersPager(chatId, messageId, orderId, parseInt(pageStr || '1'));
      return;
    }

    // Predefined selections for from/to
    default:
      if (data.startsWith('order_from_')) {
        const val = data.replace('order_from_', '');
        const wiz = await getWizard(userId);
        await setWizard(userId, { ...wiz, from: val });
        await showOrderCreationForm(chatId, messageId, 'to', userId);
        return;
      }
      if (data.startsWith('order_to_')) {
        const val = data.replace('order_to_', '');
        const wiz = await getWizard(userId);
        await setWizard(userId, { ...wiz, to: val });
        await showOrderCreationForm(chatId, messageId, 'cargo', userId);
        return;
      }
      if (data.startsWith('order_create_cargo_')) {
        const cargo = data.replace('order_create_cargo_', '');
        const wiz = await getWizard(userId);
        await setWizard(userId, { ...wiz, cargo });
        await setUserState(userId, null);
        await showOrderCreationForm(chatId, messageId, 'weight', userId);
        return;
      }
      if (data.startsWith('order_create_weight_')) {
        const weight = data.replace('order_create_weight_', '');
        const wiz = await getWizard(userId);
        await setWizard(userId, { ...wiz, weight });
        await setUserState(userId, null);
        await showOrderCreationForm(chatId, messageId, 'volume', userId);
        return;
      }
      if (data.startsWith('order_create_volume_')) {
        const volume = data.replace('order_create_volume_', '');
        const wiz = await getWizard(userId);
        await setWizard(userId, { ...wiz, volume });
        await setUserState(userId, null);
        await showOrderCreationForm(chatId, messageId, 'confirm', userId);
        return;
      }
      if (data.startsWith('choose_driver_')) {
        const [, orderId, driverUserId, priceStr] = data.split('_');
        await chooseDriverForOrder(orderId, parseInt(driverUserId), parseInt(priceStr));
        await editTelegramMessage(chatId, messageId, `‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –≤—ã–±—Ä–∞–Ω. Tracking –ø—Ä–∏—Å–≤–æ–µ–Ω.`, buildBackButton('back_staff_menu'));
    return;
  }
  
  }
}

// Show driver rating
async function showDriverRating(chatId: string, messageId: number) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/telegram/analytics`);
    const data = await response.json();
    
    if (data.success && data.analytics.topDrivers) {
      let text = '‚≠ê –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª–µ–π Velta Trans\n\n';
      
      data.analytics.topDrivers.forEach((driver: any, index: number) => {
        text += `${index + 1}. ${driver.name}\n`;
        text += `   üöó ${driver.carNumber}\n`;
        text += `   ‚≠ê ${driver.rating}/5\n\n`;
      });
      
      await editTelegramMessage(chatId, messageId, text, buildBackButton('back_sections'));
    } else {
      await editTelegramMessage(chatId, messageId, 'üìä –†–µ–π—Ç–∏–Ω–≥ –≤–æ–¥–∏—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', buildBackButton('back_sections'));
    }
  } catch (error) {
    console.error('Rating error:', error);
    await editTelegramMessage(chatId, messageId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–∞', buildBackButton('back_sections'));
  }
}

// Show analytics
async function showAnalytics(chatId: string, messageId: number) {
  try {
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/telegram/analytics`);
    const data = await response.json();
    
    if (data.success) {
      const { overview, topDrivers } = data.analytics;
      
      let text = 'üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Velta Trans\n\n';
      text += `üë• –í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${overview.totalDrivers}\n`;
      text += `‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π: ${overview.activeDrivers}\n`;
      text += `üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${overview.totalOrders}\n`;
      text += `üéØ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: ${overview.completedOrders}\n`;
      text += `üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${overview.successRate}\n\n`;
      
      if (topDrivers && topDrivers.length > 0) {
        text += 'üèÜ –¢–æ–ø –≤–æ–¥–∏—Ç–µ–ª–∏:\n';
        topDrivers.forEach((driver: any, index: number) => {
          text += `${index + 1}. ${driver.name} - ‚≠ê${driver.rating}/5 (${driver.totalOrders} –∑–∞–∫–∞–∑–æ–≤)\n`;
        });
      }
      
      await editTelegramMessage(chatId, messageId, text, buildBackButton('back_staff_menu'));
    } else {
      await editTelegramMessage(chatId, messageId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É', buildBackButton('back_staff_menu'));
    }
  } catch (error) {
    console.error('Analytics error:', error);
    await editTelegramMessage(chatId, messageId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏', buildBackButton('back_staff_menu'));
  }
}

// Show driver orders
async function showDriverOrders(chatId: string, messageId: number, userId: number) {
  const orders = await getOrders();
  const userOrders = orders.filter((o: any) => o.driverId === userId);
  
  if (userOrders.length === 0) {
    await editTelegramMessage(chatId, messageId, 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.', buildBackButton('back_driver_menu'));
    return;
  }
  
  let text = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
  userOrders.forEach((order: any, index: number) => {
    text += `${index + 1}. ${order.from} ‚Üí ${order.to}\n`;
    text += `   –ì—Ä—É–∑: ${order.cargo}\n`;
    text += `   –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
    text += `   –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleDateString()}\n\n`;
  });
  
  await editTelegramMessage(chatId, messageId, text, buildBackButton('back_driver_menu'));
}

// Show available orders for drivers
async function showAvailableOrders(chatId: string, messageId: number, userId: number) {
  const availableOrders = await getAvailableOrders();
  
  if (availableOrders.length === 0) {
    await editTelegramMessage(chatId, messageId, 'üì≠ –°–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.', buildBackButton('back_driver_menu'));
    return;
  }
  
  let text = 'üöö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n';
  const keyboard: any = {
    inline_keyboard: []
  };
  
  availableOrders.forEach((order: any, index: number) => {
    text += `${index + 1}. ${order.from} ‚Üí ${order.to}\n`;
    text += `   –ì—Ä—É–∑: ${order.cargo}\n`;
    text += `   –í–µ—Å: ${order.weight}, –û–±—ä–µ–º: ${order.volume}\n\n`;
    
    keyboard.inline_keyboard.push([
      { text: `üìù –í–∑—è—Ç—å –∑–∞–∫–∞–∑ ${index + 1}`, callback_data: `take_order_${order.id}` }
    ]);
  });
  
  keyboard.inline_keyboard.push([{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]);
  
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Show order details for driver to take
async function showOrderDetails(chatId: string, messageId: number, orderId: string) {
  const orders = await getOrders();
  const order = orders.find((o: any) => o.id === orderId);
  
  if (!order) {
    await editTelegramMessage(chatId, messageId, '‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.', buildBackButton('back_available_orders'));
    return;
  }
  
  const text = `üìã –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n\n` +
    `üìç –ú–∞—Ä—à—Ä—É—Ç: ${order.from} ‚Üí ${order.to}\n` +
    `üì¶ –ì—Ä—É–∑: ${order.cargo}\n` +
    `‚öñÔ∏è –í–µ—Å: ${order.weight}\n` +
    `üìè –û–±—ä–µ–º: ${order.volume}\n` +
    `üìÖ –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleDateString()}\n\n` +
    `üí¨ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –≤–∞—à—É —Ü–µ–Ω—É:`;
  
  const keyboard = {
        inline_keyboard: [
      [{ text: 'üí∞ 5000 —Ç–µ–Ω–≥–µ', callback_data: `offer_price_${orderId}_5000` }],
      [{ text: 'üí∞ 6000 —Ç–µ–Ω–≥–µ', callback_data: `offer_price_${orderId}_6000` }],
      [{ text: 'üí∞ 7000 —Ç–µ–Ω–≥–µ', callback_data: `offer_price_${orderId}_7000` }],
      [{ text: 'üí∞ 8000 —Ç–µ–Ω–≥–µ', callback_data: `offer_price_${orderId}_8000` }],
      [{ text: 'üí∞ –î—Ä—É–≥–∞—è —Ü–µ–Ω–∞', callback_data: `custom_price_${orderId}` }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_available_orders' }]
    ]
  };
  
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Show client orders
async function showClientOrders(chatId: string, messageId: number, userId: number) {
  const orders = await getOrders();
  const userOrders = orders.filter((o: any) => o.clientId === userId);
  
  if (userOrders.length === 0) {
    await editTelegramMessage(chatId, messageId, 'üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.', buildBackButton('back_client_menu'));
    return;
  }
  
  let text = 'üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n';
  userOrders.forEach((order: any, index: number) => {
    text += `${index + 1}. ${order.from} ‚Üí ${order.to}\n`;
    text += `   –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
    text += `   –°–æ–∑–¥–∞–Ω: ${new Date(order.createdAt).toLocaleDateString()}\n\n`;
  });
  
  await editTelegramMessage(chatId, messageId, text, buildBackButton('back_client_menu'));
}

// Show staff orders management
async function showStaffOrdersManagement(chatId: string, messageId: number) {
  const orders = await getOrders();
  const activeOrders = orders.filter((o: any) => o.status === 'active' || o.status === 'assigned');
  
  let text = 'üìã <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞–º–∏</b>\n\n';
  
  if (activeOrders.length === 0) {
    text += 'üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç';
  } else {
    activeOrders.forEach((order: any, index: number) => {
      text += `${index + 1}. ${order.from} ‚Üí ${order.to}\n`;
      text += `   –°—Ç–∞—Ç—É—Å: ${order.status}\n`;
      text += `   –ì—Ä—É–∑: ${order.cargo}\n`;
      if (order.driverId) {
        text += `   –í–æ–¥–∏—Ç–µ–ª—å: ${order.driverId}\n`;
        text += `   –¶–µ–Ω–∞: ${order.price} —Ç–µ–Ω–≥–µ\n`;
      }
      text += `   –û—Ñ—Ñ–µ—Ä—ã: staff_offers_${order.id}_1\n`;
      text += '\n';
    });
  }
  
  const keyboard = {
        inline_keyboard: [
      ...activeOrders.slice(0, 10).map((o: any, i: number) => [{ text: `üìë –û—Ñ—Ñ–µ—Ä—ã –ø–æ –∑–∞–∫–∞–∑—É ${i + 1}`, callback_data: `staff_offers_${o.id}_1` }]),
      [{ text: 'üìä –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'staff_refresh_orders' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
    ]
  };
  
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Show staff drivers management
async function showStaffDriversManagement(chatId: string, messageId: number) {
  const drivers = await getDrivers();
  
  let text = 'üöõ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏</b>\n\n';
  
  if (drivers.length === 0) {
    text += 'üì≠ –í–æ–¥–∏—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –Ω–µ—Ç';
    } else {
          drivers.forEach((driver: any, index: number) => {
        text += `${index + 1}. ${driver.name}\n`;
        text += `   üöó ${driver.carNumber}\n`;
        text += `   ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${driver.rating ? driver.rating.toFixed(2) : '–ù/–î'}/5\n`;
        text += `   üì± ${driver.phone}\n`;
        if (driver.currentStatus) {
          text += `   üìç –°—Ç–∞—Ç—É—Å: ${driver.currentStatus}\n`;
        }
        text += '\n';
      });
  }
  
  const keyboard = {
        inline_keyboard: [
      [{ text: 'üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É', callback_data: 'staff_refresh_drivers' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
    ]
  };
  
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Show driver profile
async function showDriverProfile(chatId: string, messageId: number, userId: number) {
  const drivers = await getDrivers();
  const driver = drivers.find((d: any) => d.userId === userId);
  
  if (!driver) {
    await editTelegramMessage(chatId, messageId, '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', buildBackButton('back_driver_menu'));
    return;
  }
  
  const text = `üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –≤–æ–¥–∏—Ç–µ–ª—è</b>\n\n` +
    `üìù <b>–ò–º—è:</b> ${driver.name}\n` +
    `üöó <b>–ê–≤—Ç–æ–º–æ–±–∏–ª—å:</b> ${driver.carNumber}\n` +
    `üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${driver.phone}\n` +
    `‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> ${driver.rating ? driver.rating.toFixed(2) : '–ù/–î'}/5\n` +
    `üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${driver.createdAt ? new Date(driver.createdAt).toLocaleDateString() : '–ù/–î'}\n` +
    `üìç <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${driver.currentStatus || '–ù–µ —É–∫–∞–∑–∞–Ω'}`;
  
  const keyboard = {
    inline_keyboard: [
      [{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'driver_edit_profile' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_driver_menu' }]
    ]
  };
  
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Show staff settings
async function showStaffSettings(chatId: string, messageId: number) {
  const text = '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤';
  const keyboard = {
    inline_keyboard: [
      [{ text: 'üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'change_staff_password' }],
      [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
    ]
  };
  await editTelegramMessage(chatId, messageId, text, keyboard);
}

// Show order creation form
async function showOrderCreationForm(chatId: string, messageId: number, field: string, userId: number) {
  let text = '';
  let keyboard: any;

  if (field === 'from') {
    text = 'üìç –û—Ç–∫—É–¥–∞ –∑–∞–±—Ä–∞—Ç—å –≥—Ä—É–∑?';
    keyboard = {
      inline_keyboard: [
        [{ text: '–ê–ª–º–∞—Ç—ã', callback_data: 'order_from_–ê–ª–º–∞—Ç—ã' }],
        [{ text: '–ê—Å—Ç–∞–Ω–∞', callback_data: 'order_from_–ê—Å—Ç–∞–Ω–∞' }],
        [{ text: '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', callback_data: 'order_from_custom' }],
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
      ]
    };
  } else if (field === 'to') {
    text = '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é:';
    keyboard = {
      inline_keyboard: [
        [{ text: '–ê–ª–º–∞—Ç—ã', callback_data: 'order_to_–ê–ª–º–∞—Ç—ã' }],
        [{ text: '–ê—Å—Ç–∞–Ω–∞', callback_data: 'order_to_–ê—Å—Ç–∞–Ω–∞' }],
        [{ text: '–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥', callback_data: 'order_to_custom' }],
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
      ]
    };
  } else if (field === 'cargo') {
    text = 'üì¶ –í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –≥—Ä—É–∑–∞:';
    keyboard = {
      inline_keyboard: [
        [{ text: '–ü–µ—Å–æ–∫', callback_data: 'order_create_cargo_–ü–µ—Å–æ–∫' }],
        [{ text: '–©–µ–±–µ–Ω—å', callback_data: 'order_create_cargo_–©–µ–±–µ–Ω—å' }],
        [{ text: '–ë–µ—Ç–æ–Ω', callback_data: 'order_create_cargo_–ë–µ—Ç–æ–Ω' }],
        [{ text: '–î—Ä—É–≥–æ–π –≥—Ä—É–∑', callback_data: 'order_create_cargo_–î—Ä—É–≥–æ–π' }],
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
      ]
    };
  } else if (field === 'weight') {
    text = '‚öñÔ∏è –í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ (–≤ —Ç–æ–Ω–Ω–∞—Ö):';
    keyboard = {
      inline_keyboard: [
        [{ text: '1 —Ç–æ–Ω–Ω–∞', callback_data: 'order_create_weight_1' }],
        [{ text: '5 —Ç–æ–Ω–Ω', callback_data: 'order_create_weight_5' }],
        [{ text: '10 —Ç–æ–Ω–Ω', callback_data: 'order_create_weight_10' }],
        [{ text: '–î—Ä—É–≥–æ–π –≤–µ—Å', callback_data: 'order_create_weight_custom' }],
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
      ]
    };
  } else if (field === 'volume') {
    text = 'üìè –í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≥—Ä—É–∑–∞ (–≤ –º¬≥):';
    keyboard = {
      inline_keyboard: [
        [{ text: '1 –º¬≥', callback_data: 'order_create_volume_1' }],
        [{ text: '5 –º¬≥', callback_data: 'order_create_volume_5' }],
        [{ text: '10 –º¬≥', callback_data: 'order_create_volume_10' }],
        [{ text: '–î—Ä—É–≥–æ–π –æ–±—ä–µ–º', callback_data: 'order_create_volume_custom' }],
        [{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]
      ]
    };
  } else if (field === 'confirm') {
    text = '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:';
    keyboard = {
      inline_keyboard: [
        [{ text: '–î–∞', callback_data: 'order_send' }],
        [{ text: '–ù–µ—Ç', callback_data: 'back_staff_menu' }]
      ]
    };
  }

  if (messageId) {
    await editTelegramMessage(chatId, messageId, text, keyboard);
  } else {
    await sendTelegramMessage(chatId, text, keyboard);
  }
}

// Broadcast order to all drivers
async function broadcastOrderToDrivers(order: any) {
  const drivers = await getDrivers();
  for (const driver of drivers) {
    if (driver.currentStatus === '–í –ø—É—Ç–∏' || driver.currentStatus === '–ù–∞ –∑–∞–ø—Ä–∞–≤–∫–µ') {
      const message = `üöö <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>\n\n` +
        `üìã <b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}\n` +
        `üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.clientId}\n` +
        `üì¶ <b>–ì—Ä—É–∑:</b> ${order.cargo}\n` +
        `‚öñÔ∏è <b>–í–µ—Å:</b> ${order.weight}\n` +
        `üìè <b>–û–±—ä–µ–º:</b> ${order.volume}\n` +
        `üí∞ <b>–¶–µ–Ω–∞:</b> ${order.price} —Ç–µ–Ω–≥–µ\n\n` +
        `üîó <a href="https://t.me/china_bot?start=track_${order.id}">–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑</a>`;
      await sendTelegramMessage(driver.phone, message, { parse_mode: 'HTML' });
    }
  }
}

// Send offer message with inline keyboard to staff group
async function sendDriverOfferToGroup(order: any, driver: any, price: number) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  const text = `üí∞ <b>–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã</b>\n\n` +
    `üìã <b>–ó–∞–∫–∞–∑:</b> ${order.from} ‚Üí ${order.to}\n` +
    `üì¶ <b>–ì—Ä—É–∑:</b> ${order.cargo || '‚Äî'}\n` +
    `üíµ <b>–¶–µ–Ω–∞:</b> ${price.toLocaleString()}\n\n` +
    `üë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${driver.name}\nüöó ${driver.carNumber}\nüì± ${driver.phone}`;
  const keyboard = {
    inline_keyboard: [
      [{ text: `‚úÖ –í—ã–±—Ä–∞—Ç—å ${driver.name} ‚Äî ${price.toLocaleString()}`, callback_data: `choose_driver_${order.id}_${driver.userId}_${price}` }]
    ]
  };
  try {
    await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ chat_id: CHANNEL_ID, text, parse_mode: 'HTML', reply_markup: keyboard }) });
  } catch (e) {
    console.error('sendDriverOfferToGroup error', e);
  }
}

async function createOffer(orderId: string, driverId: number, price: number) {
    await initDB();
  if (!orderOffersCollection) {
    const list = tempOffers[orderId] || [];
    list.push({ driverId, price, at: new Date().toISOString(), status: 'pending' });
    tempOffers[orderId] = list;
    return { acknowledged: true };
  }
  return await orderOffersCollection.insertOne({ orderId, driverId, price, status: 'pending', createdAt: new Date().toISOString() });
}

async function listOffers(orderId: string) {
  await initDB();
  if (!orderOffersCollection) {
    return tempOffers[orderId] || [];
  }
  return await orderOffersCollection.find({ orderId }).toArray();
}

async function acceptOffer(orderId: string, driverId: number) {
  await initDB();
  if (!orderOffersCollection) {
    const list = (tempOffers[orderId] || []).map(o => ({ ...o, status: o.driverId === driverId ? 'accepted' : 'rejected' }));
    tempOffers[orderId] = list;
    return { acknowledged: true };
  }
  await orderOffersCollection.updateMany({ orderId }, { $set: { status: 'rejected' } });
  return await orderOffersCollection.updateOne({ orderId, driverId }, { $set: { status: 'accepted' } });
}

// Accept driver for order
async function chooseDriverForOrder(orderId: string, driverUserId: number, price: number) {
  const orders = await getOrders();
  const order = orders.find((o: any) => o.id === orderId);
  if (!order) return false;
  order.driverId = driverUserId;
  order.price = price;
  order.status = 'assigned';
  order.assignedAt = new Date().toISOString();
  const short = (Math.abs(Number(String(order.id).replace(/\D/g, '').slice(-8))) || Date.now()).toString(36).toUpperCase();
  order.trackingCode = `${driverUserId}-${short}`;
  await saveOrder(order);
  await acceptOffer(orderId, driverUserId);
  await sendTelegramMessage(String(driverUserId), `‚úÖ –í—ã –Ω–∞–Ω—è—Ç—ã –Ω–∞ –∑–∞–∫–∞–∑ ${order.from} ‚Üí ${order.to}.\nTracking: <code>${order.trackingCode}</code>`, undefined);
  return true;
}

async function recordDriverOffer(orderId: string, driverUserId: number, price: number) {
  const orders = await getOrders();
  const order = orders.find((o: any) => o.id === orderId);
  if (!order) return false;
  const drivers = await getDrivers();
  const driver = drivers.find((d: any) => d.userId === driverUserId);
  if (!driver) return false;
  await createOffer(orderId, driverUserId, price);
  await sendDriverOfferToGroup(order, driver, price);
  return true;
}

// Update status for all active orders of driver
async function updateOrdersStatusForDriver(driverUserId: number, status: string, note?: string) {
  const orders = await getOrders();
  const active = orders.filter((o: any) => o.driverId === driverUserId && o.status !== 'closed' && o.status !== 'cancelled');
  for (const o of active) {
    o.logs = o.logs || [];
    o.logs.push({ at: new Date().toISOString(), actor: 'driver', action: 'status', payload: { status, note } });
    // Move overall status if —Ñ–∏–Ω–∞–ª—å–Ω—ã–π
    if (status === 'Delivered') o.status = 'delivered';
    await saveOrder(o);
  }
}

// Helper to normalize and find driver by phone number
function normalizePhoneNumber(phone: string): string {
  const digits = (phone || '').replace(/\D/g, '');
  if (digits.startsWith('8') && digits.length === 11) return '7' + digits.slice(1);
  if (digits.startsWith('7') && digits.length === 11) return digits;
  if (digits.length === 10) return '7' + digits;
  return digits;
}

function findDriverByPhone(phone: string, drivers: any[]) {
  const normalized = normalizePhoneNumber(phone);
  return drivers.find(d => normalizePhoneNumber(d.phone) === normalized);
}

async function showOrderOffersPager(chatId: string, messageId: number, orderId: string, page: number = 1) {
  const perPage = 1;
  const offers = await listOffers(orderId);
  if (!offers || offers.length === 0) {
    await editTelegramMessage(chatId, messageId, 'üì≠ –û—Ñ—Ñ–µ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç', buildBackButton('back_staff_menu'));
    return;
  }
  const total = offers.length;
  const maxPage = Math.max(1, Math.ceil(total / perPage));
  const cur = Math.min(Math.max(1, page), maxPage);
  const idx = (cur - 1) * perPage;
  const offer = offers[idx];
  const drivers = await getDrivers();
  const driver = drivers.find((d: any) => d.userId === offer.driverId) || { name: '–í–æ–¥–∏—Ç–µ–ª—å', carNumber: '‚Äî', phone: '‚Äî' };

  const text = `üìë –û—Ñ—Ñ–µ—Ä ${cur} –∏–∑ ${total}\n\n` +
    `üë§ ${driver.name}\nüöó ${driver.carNumber}\nüì± ${driver.phone}\n` +
    `üíµ –¶–µ–Ω–∞: ${offer.price.toLocaleString()}\n` +
    `‚è∞ ${new Date(offer.at || offer.createdAt).toLocaleString('ru-RU')}\n` +
    `–°—Ç–∞—Ç—É—Å: ${offer.status || 'pending'}`;

  const keyboard = { inline_keyboard: [] as any[] };
  const navRow: any[] = [];
  if (cur > 1) navRow.push({ text: '‚óÄ', callback_data: `offers_prev_${orderId}_${cur - 1}` });
  if (cur < maxPage) navRow.push({ text: '‚ñ∂', callback_data: `offers_next_${orderId}_${cur + 1}` });
  if (navRow.length) keyboard.inline_keyboard.push(navRow);
  keyboard.inline_keyboard.push([{ text: `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∞–π–º –∑–∞ ${offer.price.toLocaleString()}`, callback_data: `choose_driver_${orderId}_${offer.driverId}_${offer.price}` }]);
  keyboard.inline_keyboard.push([{ text: '‚Üê –ù–∞–∑–∞–¥', callback_data: 'back_staff_menu' }]);

  await editTelegramMessage(chatId, messageId, text, keyboard);
}

async function setWizard(userId: number, data: any) {
  await initDB();
  if (!wizardStatesCollection) { tempOrders[userId] = data; return; }
  await wizardStatesCollection.updateOne({ userId }, { $set: { userId, data, updatedAt: new Date().toISOString() } }, { upsert: true });
}

async function getWizard(userId: number) {
  await initDB();
  if (!wizardStatesCollection) return tempOrders[userId] || {};
  const row = await wizardStatesCollection.findOne({ userId });
  return row?.data || {};
}