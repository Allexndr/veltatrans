import { NextRequest, NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN || '', { polling: false });

export async function POST(request: NextRequest) {
  try {
    const update = await request.json();
    
    if (update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text;

      if (text?.startsWith('/start')) {
        await bot.sendMessage(chatId, 
          'üöö –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Velta Trans!\n\n' +
          '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≥—Ä—É–∑—ã –∏ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n' +
          '–ö–æ–º–∞–Ω–¥—ã:\n' +
          'üì¶ /track VT123456 - –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑\n' +
          'üìû /contact - —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏\n' +
          'üí∞ /calculate - —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å'
        );
      } else if (text?.startsWith('/track')) {
        const trackingNumber = text.split(' ')[1];
        if (trackingNumber) {
          // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏–Ω–≥–∞
          const trackingData = await getTrackingData(trackingNumber);
          if (trackingData) {
            await bot.sendMessage(chatId, 
              `üì¶ –ì—Ä—É–∑: ${trackingNumber}\n` +
              `üìç –°—Ç–∞—Ç—É—Å: ${trackingData.status}\n` +
              `üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${trackingData.currentLocation}\n` +
              `üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${trackingData.lastUpdate}\n\n` +
              `üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://velta-trans.com/ru/calculator`
            );
          } else {
            await bot.sendMessage(chatId, '‚ùå –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä.');
          }
        } else {
          await bot.sendMessage(chatId, '‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞: /track VT123456');
        }
      } else if (text?.startsWith('/contact')) {
        await bot.sendMessage(chatId, 
          'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã Velta Trans:\n\n' +
          'üåê –°–∞–π—Ç: https://velta-trans.com\n' +
          'üìß Email: info@velta-trans.com\n' +
          'üì± Telegram: @velta_trans\n' +
          '‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX'
        );
      } else if (text?.startsWith('/calculate')) {
        await bot.sendMessage(chatId, 
          'üí∞ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏:\n\n' +
          'üîó https://velta-trans.com/ru/calculator\n\n' +
          '–£–∫–∞–∂–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç, –≤–µ—Å –∏ —Ä–∞–∑–º–µ—Ä—ã –≥—Ä—É–∑–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.'
        );
      } else {
        await bot.sendMessage(chatId, 
          '‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
          'üì¶ /track - –æ—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑\n' +
          'üìû /contact - –∫–æ–Ω—Ç–∞–∫—Ç—ã\n' +
          'üí∞ /calculate - –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä'
        );
      }
    }

    return NextResponse.json({ ok: true });
  } catch (error) {
    console.error('Telegram webhook error:', error);
    return NextResponse.json({ error: 'Internal error' }, { status: 500 });
  }
}

async function getTrackingData(trackingNumber: string) {
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à API —Ç—Ä–µ–∫–∏–Ω–≥–∞
    const response = await fetch(`${process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'}/api/tracking/${trackingNumber}`);
    if (response.ok) {
      const data = await response.json();
      return {
        status: data.status,
        currentLocation: data.currentLocation,
        lastUpdate: new Date(data.lastUpdate).toLocaleString('ru-RU')
      };
    }
  } catch (error) {
    console.error('Error fetching tracking data:', error);
  }
  return null;
}

