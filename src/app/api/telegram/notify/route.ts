import { NextRequest, NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN || '', { polling: false });

export async function POST(request: NextRequest) {
  try {
    const { chatId, trackingNumber, status, location } = await request.json();

    if (!chatId || !trackingNumber) {
      return NextResponse.json({ error: 'Missing required fields' }, { status: 400 });
    }

    const statusEmoji = getStatusEmoji(status);
    const message = 
      `${statusEmoji} –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–∑—É ${trackingNumber}\n\n` +
      `üìç –°—Ç–∞—Ç—É—Å: ${getStatusText(status)}\n` +
      `üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${location}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
      `üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://velta-trans.com/ru/calculator`;

    await bot.sendMessage(chatId, message);

    return NextResponse.json({ success: true });
  } catch (error) {
    console.error('Telegram notification error:', error);
    return NextResponse.json({ error: 'Failed to send notification' }, { status: 500 });
  }
}

function getStatusEmoji(status: string): string {
  switch (status) {
    case 'pending': return '‚è≥';
    case 'in_transit': return 'üöö';
    case 'delivered': return '‚úÖ';
    case 'warehouse': return 'üè≠';
    default: return 'üì¶';
  }
}

function getStatusText(status: string): string {
  switch (status) {
    case 'pending': return '–û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏';
    case 'in_transit': return '–í –ø—É—Ç–∏';
    case 'delivered': return '–î–æ—Å—Ç–∞–≤–ª–µ–Ω';
    case 'warehouse': return '–ù–∞ —Å–∫–ª–∞–¥–µ';
    default: return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
  }
}

