import { NextRequest, NextResponse } from 'next/server';

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const CHANNEL_ID = process.env.TELEGRAM_CHANNEL_ID || '-1002999769930';

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(chatId: string | number, text: string, replyMarkup?: object) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'HTML',
        reply_markup: replyMarkup,
      }),
    });

    return await response.json();
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return { ok: false, error: error };
  }
}

// POST - –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { type, data } = body;

    let message = '';
    let replyMarkup;

    switch (type) {
      case 'new_order':
        message = `üì¶ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>

<b>–ù–æ–º–µ—Ä –¢–¢–ù:</b> ${data.trackingNumber}
<b>–ö–ª–∏–µ–Ω—Ç:</b> ${data.clientName}
<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${data.from} ‚Üí ${data.to}
<b>–¢–∏–ø –¢–°:</b> ${data.carType}
<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${data.description}
<b>–í–µ—Å:</b> ${data.weight} –∫–≥
<b>–û–±—ä–µ–º:</b> ${data.volume} –º¬≥

–ó–∞–∫–∞–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–æ—Å–ª–∞–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–º –≤–æ–¥–∏—Ç–µ–ª—è–º.`;

        replyMarkup = {
          inline_keyboard: [
            [{ text: 'üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑', callback_data: `view_order_${data.id}` }],
            [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'stats' }]
          ]
        };
        break;

      case 'location_update':
        message = `üìç <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è</b>

<b>–ù–æ–º–µ—Ä –¢–¢–ù:</b> ${data.trackingNumber}
<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${data.location}
<b>–°—Ç–∞—Ç—É—Å:</b> ${data.status}
<b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

–í–æ–¥–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–∑–µ.`;

        replyMarkup = {
          inline_keyboard: [
            [{ text: 'üó∫Ô∏è –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', callback_data: `map_${data.trackingNumber}` }],
            [{ text: 'üì± –°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º', callback_data: `contact_driver_${data.driverId}` }]
          ]
        };
        break;

      case 'driver_bid':
        message = `üí∞ <b>–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –æ—Ç –≤–æ–¥–∏—Ç–µ–ª—è!</b>

<b>–ó–∞–∫–∞–∑:</b> ${data.orderId}
<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${data.driverName}
<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${data.driverPhone}
<b>–ù–æ–º–µ—Ä –∞–≤—Ç–æ:</b> ${data.carNumber}
<b>–¶–µ–Ω–∞:</b> ${data.price} —Ç–µ–Ω–≥–µ
<b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> ${data.location}
<b>–î–∞—Ç–∞ –ø–æ–≥—Ä—É–∑–∫–∏:</b> ${data.loadingDate}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

        replyMarkup = {
          inline_keyboard: [
            [{ text: '‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data: `accept_bid_${data.bidId}` }],
            [{ text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_bid_${data.bidId}` }],
            [{ text: 'üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å', callback_data: `call_${data.driverPhone}` }]
          ]
        };
        break;

      case 'order_completed':
        message = `‚úÖ <b>–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

<b>–ù–æ–º–µ—Ä –¢–¢–ù:</b> ${data.trackingNumber}
<b>–ú–∞—Ä—à—Ä—É—Ç:</b> ${data.from} ‚Üí ${data.to}
<b>–í–æ–¥–∏—Ç–µ–ª—å:</b> ${data.driverName}
<b>–§–∏–Ω–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:</b> ${data.finalPrice} —Ç–µ–Ω–≥–µ
<b>–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:</b> ${new Date().toLocaleString('ru-RU')}

–ì—Ä—É–∑ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—é.`;

        replyMarkup = {
          inline_keyboard: [
            [{ text: 'üìä –û—Ç—á–µ—Ç', callback_data: `report_${data.trackingNumber}` }],
            [{ text: '‚≠ê –û—Ü–µ–Ω–∏—Ç—å', callback_data: `rate_${data.trackingNumber}` }]
          ]
        };
        break;

      default:
        message = `‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>

${data.message || '–ù–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã'}`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
    const result = await sendTelegramMessage(CHANNEL_ID, message, replyMarkup);

    if (result.ok) {
      return NextResponse.json({ success: true, message: 'Notification sent successfully' });
    } else {
      return NextResponse.json({ error: 'Failed to send notification' }, { status: 500 });
    }

  } catch (error) {
    console.error('Error sending notification:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
export async function GET() {
  try {
    const testMessage = `
ü§ñ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω  
‚úÖ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω

‚è∞ ${new Date().toLocaleString('ru-RU')}
    `;

    const result = await sendTelegramMessage(CHANNEL_ID, testMessage);
    
    return NextResponse.json({
      success: !!result,
      test_sent: true,
      channel_id: CHANNEL_ID
    });
  } catch (error) {
    console.error('Test error:', error);
    return NextResponse.json({ error: 'Test failed' }, { status: 500 });
  }
}