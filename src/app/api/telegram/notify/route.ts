import { NextRequest, NextResponse } from 'next/server';

const TELEGRAM_BOT_TOKEN = '8414818778:AAG2QXqDu0WKwsClyMt5CpbpLQBL3QLVWUE';
const TELEGRAM_CHANNEL_ID = '-1002999769930';

interface OrderNotification {
  orderId: string;
  customerName: string;
  fromCity: string;
  toCity: string;
  cargoType: string;
  weight: string;
  volume: string;
  shipmentType: string;
  phone: string;
  urgency: 'low' | 'medium' | 'high';
  specialRequirements?: string;
}

async function sendTelegramMessage(chatId: string | number, text: string, replyMarkup?: object) {
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
  
  const payload = {
    chat_id: chatId,
    text,
    parse_mode: 'HTML',
    ...replyMarkup && { reply_markup: replyMarkup }
  };

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(payload),
    });

    if (!response.ok) {
      console.error('Telegram API error:', await response.text());
      return null;
    }
    
    return response.json();
  } catch (error) {
    console.error('Error sending message:', error);
    return null;
  }
}

function getUrgencyEmoji(urgency: string): string {
  switch (urgency) {
    case 'high': return 'üî¥';
    case 'medium': return 'üü°';
    case 'low': return 'üü¢';
    default: return '‚ö™';
  }
}

function getShipmentTypeEmoji(type: string): string {
  switch (type) {
    case 'auto': return 'üöõ';
    case 'railway': return 'üöÇ';
    case 'multimodal': return 'üîÑ';
    case 'project': return 'üèóÔ∏è';
    default: return 'üì¶';
  }
}

export async function POST(request: NextRequest) {
  try {
    const { type, data } = await request.json();

    if (type === 'new_order') {
      const order: OrderNotification = data;
      
      const urgencyEmoji = getUrgencyEmoji(order.urgency);
      const shipmentEmoji = getShipmentTypeEmoji(order.shipmentType);
      
      const orderMessage = `
${urgencyEmoji} <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó</b> ${shipmentEmoji}

üìã <b>ID –∑–∞–∫–∞–∑–∞:</b> ${order.orderId}
üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${order.customerName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${order.phone}

üõ£Ô∏è <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
üìç –û—Ç–∫—É–¥–∞: ${order.fromCity}
üìç –ö—É–¥–∞: ${order.toCity}

üì¶ <b>–ì—Ä—É–∑:</b>
‚Ä¢ –¢–∏–ø: ${order.cargoType}
‚Ä¢ –í–µ—Å: ${order.weight}
‚Ä¢ –û–±—ä–µ–º: ${order.volume}

üöõ <b>–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</b> ${order.shipmentType === 'auto' ? '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ' : 
  order.shipmentType === 'railway' ? '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ' :
  order.shipmentType === 'multimodal' ? '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ' : '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ'}

${order.specialRequirements ? `‚ö†Ô∏è <b>–û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:</b> ${order.specialRequirements}` : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

<i>–í–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞</i>
      `;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª
      const result = await sendTelegramMessage(TELEGRAM_CHANNEL_ID, orderMessage);
      
      return NextResponse.json({ 
        success: !!result,
        message_id: result?.result?.message_id 
      });
    }

    if (type === 'calculation_request') {
      const calc = data;
      
      const calcMessage = `
üìä <b>–ó–ê–ü–†–û–° –ù–ê –†–ê–°–ß–ï–¢</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> ${calc.senderName}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${calc.phone}

üõ£Ô∏è <b>–ú–∞—Ä—à—Ä—É—Ç:</b>
üìç ${calc.fromCity} ‚Üí ${calc.toCity}

üì¶ <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞:</b>
‚Ä¢ –í–µ—Å: ${calc.weight} –∫–≥
‚Ä¢ –û–±—ä–µ–º: ${calc.volume} –º¬≥
‚Ä¢ –¢–∏–ø: ${calc.cargoType || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üöõ <b>–¢–∏–ø –ø–µ—Ä–µ–≤–æ–∑–∫–∏:</b> ${calc.shipmentType === 'auto' ? '–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ' : 
  calc.shipmentType === 'railway' ? '–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–µ' :
  calc.shipmentType === 'multimodal' ? '–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ' : '–ü—Ä–æ–µ–∫—Ç–Ω—ã–µ'}

${calc.isOversized ? '‚ö†Ô∏è –ù–µ–≥–∞–±–∞—Ä–∏—Ç–Ω—ã–π –≥—Ä—É–∑' : ''}
${calc.isDangerous ? '‚ò¢Ô∏è –û–ø–∞—Å–Ω—ã–π –≥—Ä—É–∑' : ''}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}

<i>‚ùó –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞</i>
      `;

      const result = await sendTelegramMessage(TELEGRAM_CHANNEL_ID, calcMessage);
      
      return NextResponse.json({ 
        success: !!result,
        message_id: result?.result?.message_id 
      });
    }

    if (type === 'contact_form') {
      const contact = data;
      
      const contactMessage = `
üìß <b>–ù–û–í–û–ï –û–ë–†–ê–©–ï–ù–ò–ï</b>

üë§ <b>–ò–º—è:</b> ${contact.name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${contact.phone}
üìß <b>Email:</b> ${contact.email}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
${contact.message}

‚è∞ <b>–í—Ä–µ–º—è:</b> ${new Date().toLocaleString('ru-RU')}
      `;

      const result = await sendTelegramMessage(TELEGRAM_CHANNEL_ID, contactMessage);
      
      return NextResponse.json({ 
        success: !!result,
        message_id: result?.result?.message_id 
      });
    }

    return NextResponse.json({ error: 'Unknown notification type' }, { status: 400 });
  } catch (error) {
    console.error('Notification error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}

// –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
export async function GET() {
  try {
    const testMessage = `
ü§ñ <b>–¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>

‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω  
‚úÖ –ö–∞–Ω–∞–ª –ø–æ–¥–∫–ª—é—á–µ–Ω

‚è∞ ${new Date().toLocaleString('ru-RU')}
    `;

    const result = await sendTelegramMessage(TELEGRAM_CHANNEL_ID, testMessage);
    
    return NextResponse.json({
      success: !!result,
      test_sent: true,
      channel_id: TELEGRAM_CHANNEL_ID
    });
  } catch (error) {
    console.error('Test error:', error);
    return NextResponse.json({ error: 'Test failed' }, { status: 500 });
  }
}