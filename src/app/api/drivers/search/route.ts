import { NextRequest, NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export async function POST(request: NextRequest) {
  try {
    const { phone } = await request.json();
    
    if (!phone) {
      return NextResponse.json({ error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' }, { status: 400 });
    }
    
    console.log('üîç –ü–æ–∏—Å–∫ –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –Ω–æ–º–µ—Ä—É:', phone);
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
    const dataDir = path.join(process.cwd(), 'data', 'velta-data');
    const driversFile = path.join(dataDir, 'drivers.json');
    
    console.log('üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–æ–¥–∏—Ç–µ–ª–µ–π:', driversFile);
    
    if (!fs.existsSync(driversFile)) {
      console.log('‚ùå –§–∞–π–ª –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json({ error: '–ë–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 });
    }
    
    const drivers = JSON.parse(fs.readFileSync(driversFile, 'utf8'));
    console.log('üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π:', drivers.length);
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const normalizedPhone = normalizePhone(phone);
    console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä:', normalizedPhone);
    
    // –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É –∏–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º
    const driver = drivers.find((d: any) => {
      console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤–æ–¥–∏—Ç–µ–ª—è: ${d.name} - ${d.phone}`);
      
      // –ü–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
      if (d.phone === normalizedPhone) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –Ω–æ–º–µ—Ä—É');
        return true;
      }
      
      // –ü–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–æ–º–µ—Ä–æ–≤
      if (d.phoneVariants && Array.isArray(d.phoneVariants)) {
        if (d.phoneVariants.includes(normalizedPhone)) {
          console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º –Ω–æ–º–µ—Ä–æ–≤');
          return true;
        }
      }
      
      // –ü–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —Ü–∏—Ñ—Ä
      const driverDigits = d.phone.replace(/[^\d]/g, '');
      const searchDigits = normalizedPhone.replace(/[^\d]/g, '');
      if (driverDigits === searchDigits) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ —Ü–∏—Ñ—Ä–∞–º');
        return true;
      }
      
      return false;
    });
    
    if (!driver) {
      console.log('‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return NextResponse.json({ error: '–í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' }, { status: 404 });
    }
    
    console.log('‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', driver.name);
    
    return NextResponse.json({ 
      success: true, 
      driver: {
        id: driver.id,
        name: driver.name,
        phone: driver.phone,
        carNumber: driver.carNumber,
        carType: driver.carType,
        experience: driver.experience,
        rating: driver.rating,
        status: driver.status,
        location: driver.location
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–æ–¥–∏—Ç–µ–ª—è:', error);
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 });
  }
}

// –§—É–Ω–∫—Ü–∏—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
function normalizePhone(phone: string): string {
  console.log('üì± –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞:', phone);
  
  // –£–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä
  let digits = phone.replace(/[^\d]/g, '');
  console.log('üì± –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã:', digits);
  
  // –í –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ 870 –∏ 770 - —ç—Ç–æ –æ–¥–∏–Ω –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã
  if (digits.startsWith('870')) {
    // –ó–∞–º–µ–Ω—è–µ–º 870 –Ω–∞ 770 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    digits = '770' + digits.slice(3);
    console.log('üì± 870‚Üí770:', digits);
  } else if (digits.startsWith('770')) {
    // –ó–∞–º–µ–Ω—è–µ–º 770 –Ω–∞ 870 –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    digits = '870' + digits.slice(3);
    console.log('üì± 770‚Üí870:', digits);
  }
  
  // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ 7
  if (digits.startsWith('8')) {
    digits = '7' + digits.slice(1);
    console.log('üì± 8‚Üí7:', digits);
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º + –≤ –Ω–∞—á–∞–ª–æ
  const result = `+${digits}`;
  console.log('üì± –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:', result);
  return result;
}
