'use client';

import { useState, useEffect } from 'react';

interface BotInfo {
  id: number;
  is_bot: boolean;
  first_name: string;
  username: string;
  can_join_groups: boolean;
  can_read_all_group_messages: boolean;
  supports_inline_queries: boolean;
}

interface WebhookInfo {
  url: string;
  has_custom_certificate: boolean;
  pending_update_count: number;
  last_error_date?: number;
  last_error_message?: string;
  max_connections: number;
  allowed_updates: string[];
}

export default function TelegramAdminPage() {
  const [botInfo, setBotInfo] = useState<BotInfo | null>(null);
  const [webhookInfo, setWebhookInfo] = useState<WebhookInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const [actionLoading, setActionLoading] = useState(false);
  const [message, setMessage] = useState('');

  useEffect(() => {
    fetchBotInfo();
  }, []);

  const fetchBotInfo = async () => {
    try {
      const response = await fetch('/api/telegram/setup');
      const data = await response.json();
      setBotInfo(data.bot);
      setWebhookInfo(data.webhook);
    } catch (error) {
      console.error('Error fetching bot info:', error);
      setMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ');
    } finally {
      setLoading(false);
    }
  };

  const setWebhook = async () => {
    setActionLoading(true);
    setMessage('');
    try {
      const response = await fetch('/api/telegram/setup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'setWebhook' }),
      });
      const data = await response.json();
      
      if (data.success) {
        setMessage('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
        fetchBotInfo();
      } else {
        setMessage('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: ' + data.description);
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook');
    } finally {
      setActionLoading(false);
    }
  };

  const deleteWebhook = async () => {
    setActionLoading(true);
    setMessage('');
    try {
      const response = await fetch('/api/telegram/setup', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ action: 'deleteWebhook' }),
      });
      const data = await response.json();
      
      if (data.ok) {
        setMessage('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!');
        fetchBotInfo();
      } else {
        setMessage('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook');
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook');
    } finally {
      setActionLoading(false);
    }
  };

  const sendTestNotification = async () => {
    setActionLoading(true);
    setMessage('');
    try {
      const response = await fetch('/api/telegram/notify');
      const data = await response.json();
      
      if (data.success) {
        setMessage('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
      } else {
        setMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      }
    } catch (error) {
      setMessage('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
    } finally {
      setActionLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-lg shadow-lg p-8">
          <div className="flex items-center mb-8">
            <div className="w-12 h-12 bg-blue-600 rounded-lg flex items-center justify-center mr-4">
              <svg className="w-6 h-6 text-white" fill="currentColor" viewBox="0 0 24 24">
                <path d="M12 0C5.374 0 0 5.373 0 12s5.374 12 12 12 12-5.373 12-12S18.626 0 12 0zm5.568 8.16c-.169 1.858-.896 6.728-.896 6.728-.896 6.728-1.268 8.046-1.268 8.046-.16.708-.534.855-.534.855s-.913.048-1.898-.537c-.987-.585-2.271-1.455-2.271-1.455l-2.055-1.31s-.547-.414-.547-1.046c0-.631.547-1.046.547-1.046l8.53-7.861s.632-.547 1.046-.547c.414 0 .632.547.632.547l1.046 8.53z"/>
              </svg>
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Telegram –±–æ—Ç–æ–º</h1>
              <p className="text-gray-600">–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ Velta Trans</p>
            </div>
          </div>

          {message && (
            <div className={`p-4 rounded-lg mb-6 ${
              message.includes('‚úÖ') ? 'bg-green-50 text-green-800 border border-green-200' : 
              'bg-red-50 text-red-800 border border-red-200'
            }`}>
              {message}
            </div>
          )}

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ */}
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</h2>
            {botInfo ? (
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <span className="text-sm font-medium text-gray-500">–ò–º—è:</span>
                    <p className="text-gray-900">{botInfo.first_name}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">Username:</span>
                    <p className="text-gray-900">@{botInfo.username}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">ID:</span>
                    <p className="text-gray-900">{botInfo.id}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">–°—Ç–∞—Ç—É—Å:</span>
                    <p className="text-green-600">‚úÖ –ê–∫—Ç–∏–≤–µ–Ω</p>
                  </div>
                </div>
              </div>
            ) : (
              <p className="text-red-600">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ</p>
            )}
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook */}
          <div className="mb-8">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Webhook</h2>
            {webhookInfo ? (
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="grid grid-cols-1 gap-4">
                  <div>
                    <span className="text-sm font-medium text-gray-500">URL:</span>
                    <p className="text-gray-900 break-all">{webhookInfo.url || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</span>
                    <p className="text-gray-900">{webhookInfo.pending_update_count}</p>
                  </div>
                  {webhookInfo.last_error_message && (
                    <div>
                      <span className="text-sm font-medium text-gray-500">–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞:</span>
                      <p className="text-red-600">{webhookInfo.last_error_message}</p>
                    </div>
                  )}
                  <div>
                    <span className="text-sm font-medium text-gray-500">–ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:</span>
                    <p className="text-gray-900">{webhookInfo.max_connections}</p>
                  </div>
                  <div>
                    <span className="text-sm font-medium text-gray-500">–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</span>
                    <p className="text-gray-900">{webhookInfo.allowed_updates.join(', ')}</p>
                  </div>
                </div>
              </div>
            ) : (
              <p className="text-red-600">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook</p>
            )}
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="space-y-4">
            <h2 className="text-xl font-semibold text-gray-900">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
            
            <div className="flex flex-wrap gap-4">
              <button
                onClick={setWebhook}
                disabled={actionLoading}
                className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üîó –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook'}
              </button>

              <button
                onClick={deleteWebhook}
                disabled={actionLoading}
                className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {actionLoading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å Webhook'}
              </button>

              <button
                onClick={sendTestNotification}
                disabled={actionLoading}
                className="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {actionLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : 'üì® –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'}
              </button>

              <button
                onClick={fetchBotInfo}
                disabled={actionLoading}
                className="px-6 py-3 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {actionLoading ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'}
              </button>
            </div>
          </div>

          {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
          <div className="mt-8 bg-blue-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-blue-900 mb-4">üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏</h3>
            <div className="space-y-2 text-blue-800">
              <p><strong>1.</strong> –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</p>
              <p><strong>2.</strong> –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª –ø—Ä–∏ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö</p>
              <p><strong>3.</strong> –í–æ–¥–∏—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ –±–æ—Ç–∞: /start</p>
              <p><strong>4.</strong> –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª: -1002999769930</p>
              <p><strong>5.</strong> –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è&quot;</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
