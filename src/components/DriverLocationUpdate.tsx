'use client';

import { useState } from 'react';

interface DriverLocationUpdateProps {
  driverId: number;
  orderId: string;
  onLocationUpdate?: (location: any) => void;
}

export default function DriverLocationUpdate({ driverId, orderId, onLocationUpdate }: DriverLocationUpdateProps) {
  const [isUpdating, setIsUpdating] = useState(false);
  const [message, setMessage] = useState('');
  const [locationData, setLocationData] = useState({
    lat: '',
    lng: '',
    location: '',
    status: 'in_transit',
    description: '',
    customStatus: ''
  });

  const handleLocationUpdate = async () => {
    if (!locationData.lat || !locationData.lng || !locationData.location) {
      setMessage('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setIsUpdating(true);
    setMessage('');

    try {
      const response = await fetch('/api/driver/location', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          driverId,
          orderId,
          lat: parseFloat(locationData.lat),
          lng: parseFloat(locationData.lng),
          location: locationData.location,
          status: locationData.status === 'custom' ? locationData.customStatus : locationData.status,
          description: locationData.description,
          timestamp: new Date().toISOString()
        }),
      });

      if (response.ok) {
        const result = await response.json();
        setMessage('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        setLocationData({
          lat: '',
          lng: '',
          location: '',
          status: 'in_transit',
          description: '',
          customStatus: ''
        });
        
        if (onLocationUpdate) {
          onLocationUpdate(result.routePoint);
        }
      } else {
        const error = await response.json();
        setMessage(`–û—à–∏–±–∫–∞: ${error.error}`);
      }
    } catch (error) {
      setMessage('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
    } finally {
      setIsUpdating(false);
    }
  };

  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setLocationData(prev => ({
            ...prev,
            lat: position.coords.latitude.toString(),
            lng: position.coords.longitude.toString()
          }));
        },
        (error) => {
          setMessage('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ' + error.message);
        }
      );
    } else {
      setMessage('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ –≤–∞—à–µ–º –±—Ä–∞—É–∑–µ—Ä–µ');
    }
  };

  return (
    <div className="bg-white rounded-lg border border-gray-200 p-6 mt-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
        <span className="mr-2">üìç</span>
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –®–∏—Ä–æ—Ç–∞ (Latitude)
          </label>
          <input
            type="number"
            step="any"
            value={locationData.lat}
            onChange={(e) => setLocationData(prev => ({ ...prev, lat: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-velta-royal-blue focus:border-velta-royal-blue"
            placeholder="43.2381"
          />
        </div>
        
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –î–æ–ª–≥–æ—Ç–∞ (Longitude)
          </label>
          <input
            type="number"
            step="any"
            value={locationData.lng}
            onChange={(e) => setLocationData(prev => ({ ...prev, lng: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-velta-royal-blue focus:border-velta-royal-blue"
            placeholder="76.9452"
          />
        </div>
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        </label>
        <input
          type="text"
          value={locationData.location}
          onChange={(e) => setLocationData(prev => ({ ...prev, location: e.target.value }))}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-velta-royal-blue focus:border-velta-royal-blue"
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ó–∞–ø—Ä–∞–≤–∫–∞, –°–∫–ª–∞–¥, –¢–∞–º–æ–∂–Ω—è"
        />
      </div>

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –°—Ç–∞—Ç—É—Å
        </label>
        <select
          value={locationData.status}
          onChange={(e) => setLocationData(prev => ({ ...prev, status: e.target.value }))}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-velta-royal-blue focus:border-velta-royal-blue"
        >
          <option value="in_transit">–í –ø—É—Ç–∏</option>
          <option value="warehouse">–ù–∞ —Å–∫–ª–∞–¥–µ</option>
          <option value="delivered">–î–æ—Å—Ç–∞–≤–ª–µ–Ω</option>
          <option value="delayed">–ó–∞–¥–µ—Ä–∂–∫–∞</option>
          <option value="custom">–ö–∞—Å—Ç–æ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å</option>
        </select>
      </div>

      {locationData.status === 'custom' && (
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-2">
            –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å
          </label>
          <input
            type="text"
            value={locationData.customStatus || ''}
            onChange={(e) => setLocationData(prev => ({ ...prev, customStatus: e.target.value }))}
            className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-velta-royal-blue focus:border-velta-royal-blue"
            placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ù–∞ —Ç–∞–º–æ–∂–Ω–µ, –ü–æ–≥—Ä—É–∑–∫–∞, –†–∞–∑–≥—Ä—É–∑–∫–∞, –†–µ–º–æ–Ω—Ç"
          />
        </div>
      )}

      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-2">
          –û–ø–∏—Å–∞–Ω–∏–µ
        </label>
        <textarea
          value={locationData.description}
          onChange={(e) => setLocationData(prev => ({ ...prev, description: e.target.value }))}
          className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-velta-royal-blue focus:border-velta-royal-blue"
          rows={3}
          placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –∑–∞–ø—Ä–∞–≤–∫–µ, –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ, –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–∞–º–æ–∂–Ω–∏"
        />
      </div>

      <div className="flex flex-wrap gap-3 mb-4">
        <button
          onClick={getCurrentLocation}
          className="inline-flex items-center px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 transition-colors duration-200"
        >
          üìç –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
        </button>
        
        <button
          onClick={handleLocationUpdate}
          disabled={isUpdating}
          className="inline-flex items-center px-4 py-2 bg-velta-royal-blue text-white text-sm font-medium rounded-lg hover:bg-velta-navy transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {isUpdating ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
              –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...
            </>
          ) : (
            '–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ'
          )}
        </button>
      </div>

      {message && (
        <div className={`p-3 rounded-lg text-sm ${
          message.includes('–û—à–∏–±–∫–∞') 
            ? 'bg-red-100 text-red-800 border border-red-200' 
            : 'bg-green-100 text-green-800 border border-green-200'
        }`}>
          {message}
        </div>
      )}

      <div className="text-xs text-gray-500 mt-3">
        <p>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ&quot; –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç</p>
        <p>‚Ä¢ –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é</p>
        <p>‚Ä¢ –û–±–Ω–æ–≤–ª—è–π—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞</p>
      </div>
    </div>
  );
}
